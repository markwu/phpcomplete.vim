call extend(g:php_builtin_functions, {
\ 'addcslashes(': 'string $str, string $charlist | string',
\ 'addslashes(': 'string $str | string',
\ 'bin2hex(': 'string $str | string',
\ 'chop(': 'chop — Alias of rtrim()',
\ 'chr(': 'int $ascii | string',
\ 'chunk_split(': 'string $body [, int $chunklen = 76 [, string $end = "\r\n"]] | string',
\ 'convert_cyr_string(': 'string $str, string $from, string $to | string',
\ 'convert_uudecode(': 'string $data | string',
\ 'convert_uuencode(': 'string $data | string',
\ 'count_chars(': 'string $string [, int $mode = 0] | mixed',
\ 'crc32(': 'string $str | int',
\ 'crypt(': 'string $str [, string $salt] | string',
\ 'echo(': 'string $arg1 [, string $...] | void',
\ 'explode(': 'string $delimiter, string $string [, int $limit] | array',
\ 'fprintf(': 'resource $handle, string $format [, mixed $args [, mixed $...]] | int',
\ 'get_html_translation_table(': '[ int $table = HTML_SPECIALCHARS [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = ''UTF-8'']]] | array',
\ 'hebrev(': 'string $hebrew_text [, int $max_chars_per_line = 0] | string',
\ 'hebrevc(': 'string $hebrew_text [, int $max_chars_per_line = 0] | string',
\ 'hex2bin(': 'string $data | string',
\ 'html_entity_decode(': 'string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = ''UTF-8'']] | string',
\ 'htmlentities(': 'string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = ''UTF-8'' [, bool $double_encode = true]]] | string',
\ 'htmlspecialchars_decode(': 'string $string [, int $flags = ENT_COMPAT | ENT_HTML401] | string',
\ 'htmlspecialchars(': 'string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = ''UTF-8'' [, bool $double_encode = true]]] | string',
\ 'implode(': 'string $glue, array $pieces | string',
\ 'join(': 'join — Alias of implode()',
\ 'lcfirst(': 'string $str | string',
\ 'levenshtein(': 'string $str1, string $str2 | int',
\ 'localeconv(': 'void | array',
\ 'ltrim(': 'string $str [, string $charlist] | string',
\ 'md5_file(': 'string $filename [, bool $raw_output = false] | string',
\ 'md5(': 'string $str [, bool $raw_output = false] | string',
\ 'metaphone(': 'string $str [, int $phonemes = 0] | string',
\ 'money_format(': 'string $format, float $number | string',
\ 'nl_langinfo(': 'int $item | string',
\ 'nl2br(': 'string $string [, bool $is_xhtml = true] | string',
\ 'number_format(': 'float $number [, int $decimals = 0] | string',
\ 'ord(': 'string $string | int',
\ 'parse_str(': 'string $str [, array &$arr] | void',
\ 'print(': 'string $arg | int',
\ 'printf(': 'string $format [, mixed $args [, mixed $...]] | int',
\ 'quoted_printable_decode(': 'string $str | string',
\ 'quoted_printable_encode(': 'string $str | string',
\ 'quotemeta(': 'string $str | string',
\ 'rtrim(': 'string $str [, string $charlist] | string',
\ 'setlocale(': 'int $category, string $locale [, string $...] | string',
\ 'sha1_file(': 'string $filename [, bool $raw_output = false] | string',
\ 'sha1(': 'string $str [, bool $raw_output = false] | string',
\ 'similar_text(': 'string $first, string $second [, float &$percent] | int',
\ 'soundex(': 'string $str | string',
\ 'sprintf(': 'string $format [, mixed $args [, mixed $...]] | string',
\ 'sscanf(': 'string $str, string $format [, mixed &$...] | mixed',
\ 'str_getcsv(': 'string $input [, string $delimiter = '','' [, string $enclosure = ''"'' [, string $escape = ''\\'']]] | array',
\ 'str_ireplace(': 'mixed $search, mixed $replace, mixed $subject [, int &$count] | mixed',
\ 'str_pad(': 'string $input, int $pad_length [, string $pad_string = " " [, int $pad_type = STR_PAD_RIGHT]] | string',
\ 'str_repeat(': 'string $input, int $multiplier | string',
\ 'str_replace(': 'mixed $search, mixed $replace, mixed $subject [, int &$count] | mixed',
\ 'str_rot13(': 'string $str | string',
\ 'str_shuffle(': 'string $str | string',
\ 'str_split(': 'string $string [, int $split_length = 1] | array',
\ 'str_word_count(': 'string $string [, int $format = 0 [, string $charlist]] | mixed',
\ 'strcasecmp(': 'string $str1, string $str2 | int',
\ 'strchr(': 'strchr — Alias of strstr()',
\ 'strcmp(': 'string $str1, string $str2 | int',
\ 'strcoll(': 'string $str1, string $str2 | int',
\ 'strcspn(': 'string $str1, string $str2 [, int $start [, int $length]] | int',
\ 'strip_tags(': 'string $str [, string $allowable_tags] | string',
\ 'stripcslashes(': 'string $str | string',
\ 'stripos(': 'string $haystack, string $needle [, int $offset = 0] | int',
\ 'stripslashes(': 'string $str | string',
\ 'stristr(': 'string $haystack, mixed $needle [, bool $before_needle = false] | string',
\ 'strlen(': 'string $string | int',
\ 'strnatcasecmp(': 'string $str1, string $str2 | int',
\ 'strnatcmp(': 'string $str1, string $str2 | int',
\ 'strncasecmp(': 'string $str1, string $str2, int $len | int',
\ 'strncmp(': 'string $str1, string $str2, int $len | int',
\ 'strpbrk(': 'string $haystack, string $char_list | string',
\ 'strpos(': 'string $haystack, mixed $needle [, int $offset = 0] | mixed',
\ 'strrchr(': 'string $haystack, mixed $needle | string',
\ 'strrev(': 'string $string | string',
\ 'strripos(': 'string $haystack, string $needle [, int $offset = 0] | int',
\ 'strrpos(': 'string $haystack, string $needle [, int $offset = 0] | int',
\ 'strspn(': 'string $subject, string $mask [, int $start [, int $length]] | int',
\ 'strstr(': 'string $haystack, mixed $needle [, bool $before_needle = false] | string',
\ 'strtok(': 'string $str, string $token | string',
\ 'strtolower(': 'string $str | string',
\ 'strtoupper(': 'string $string | string',
\ 'strtr(': 'string $str, string $from, string $to | string',
\ 'substr_compare(': 'string $main_str, string $str, int $offset [, int $length [, bool $case_insensitivity = false]] | int',
\ 'substr_count(': 'string $haystack, string $needle [, int $offset = 0 [, int $length]] | int',
\ 'substr_replace(': 'mixed $string, mixed $replacement, mixed $start [, mixed $length] | mixed',
\ 'substr(': 'string $string, int $start [, int $length] | string',
\ 'trim(': 'string $str [, string $charlist = " \t\n\r\0\x0B"] | string',
\ 'ucfirst(': 'string $str | string',
\ 'ucwords(': 'string $str | string',
\ 'vfprintf(': 'resource $handle, string $format, array $args | int',
\ 'vprintf(': 'string $format, array $args | int',
\ 'vsprintf(': 'string $format, array $args | string',
\ 'wordwrap(': 'string $str [, int $width = 75 [, string $break = "\n" [, bool $cut = false]]] | string',
\ })
