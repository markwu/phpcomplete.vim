call extend(g:php_builtin_functions, {
\ 'array_change_key_case(': 'array $array [, int $case = CASE_LOWER] | array',
\ 'array_chunk(': 'array $array, int $size [, bool $preserve_keys = false] | array',
\ 'array_column(': 'array $array, mixed $column_key [, mixed $index_key = null] | array',
\ 'array_combine(': 'array $keys, array $values | array',
\ 'array_count_values(': 'array $array | array',
\ 'array_diff_assoc(': 'array $array1, array $array2 [, array $...] | array',
\ 'array_diff_key(': 'array $array1, array $array2 [, array $...] | array',
\ 'array_diff_uassoc(': 'array $array1, array $array2 [, array $... [, callable $key_compare_func]] | array',
\ 'array_diff_ukey(': 'array $array1, array $array2 [, array $... [, callable $key_compare_func]] | array',
\ 'array_diff(': 'array $array1, array $array2 [, array $...] | array',
\ 'array_fill_keys(': 'array $keys, mixed $value | array',
\ 'array_fill(': 'int $start_index, int $num, mixed $value | array',
\ 'array_filter(': 'array $array [, callable $callback] | array',
\ 'array_flip(': 'array $array | array',
\ 'array_intersect_assoc(': 'array $array1, array $array2 [, array $...] | array',
\ 'array_intersect_key(': 'array $array1, array $array2 [, array $...] | array',
\ 'array_intersect_uassoc(': 'array $array1, array $array2 [, array $... [, callable $key_compare_func]] | array',
\ 'array_intersect_ukey(': 'array $array1, array $array2 [, array $... [, callable $key_compare_func]] | array',
\ 'array_intersect(': 'array $array1, array $array2 [, array $...] | array',
\ 'array_key_exists(': 'mixed $key, array $array | bool',
\ 'array_keys(': 'array $array [, mixed $search_value = NULL [, bool $strict = false]] | array',
\ 'array_map(': 'callable $callback, array $array1 [, array $...] | array',
\ 'array_merge_recursive(': 'array $array1 [, array $...] | array',
\ 'array_merge(': 'array $array1 [, array $...] | array',
\ 'array_multisort(': 'array &$array1 [, mixed $array1_sort_order = SORT_ASC [, mixed $array1_sort_flags = SORT_REGULAR [, mixed $...]]] | bool',
\ 'array_pad(': 'array $array, int $size, mixed $value | array',
\ 'array_pop(': 'array &$array | mixed',
\ 'array_product(': 'array $array | number',
\ 'array_push(': 'array &$array, mixed $value1 [, mixed $...] | int',
\ 'array_rand(': 'array $array [, int $num = 1] | mixed',
\ 'array_reduce(': 'array $array, callable $callback [, mixed $initial = NULL] | mixed',
\ 'array_replace_recursive(': 'array $array1, array $array2 [, array $...] | array',
\ 'array_replace(': 'array $array1, array $array2 [, array $...] | array',
\ 'array_reverse(': 'array $array [, bool $preserve_keys = false] | array',
\ 'array_search(': 'mixed $needle, array $haystack [, bool $strict = false] | mixed',
\ 'array_shift(': 'array &$array | mixed',
\ 'array_slice(': 'array $array, int $offset [, int $length = NULL [, bool $preserve_keys = false]] | array',
\ 'array_splice(': 'array &$input, int $offset [, int $length [, mixed $replacement = array()]] | array',
\ 'array_sum(': 'array $array | number',
\ 'array_udiff_assoc(': 'array $array1, array $array2 [, array $... [, callable $value_compare_func]] | array',
\ 'array_udiff_uassoc(': 'array $array1, array $array2 [, array $... [, callable $value_compare_func [, callable $key_compare_func]]] | array',
\ 'array_udiff(': 'array $array1, array $array2 [, array $... [, callable $value_compare_func]] | array',
\ 'array_uintersect_assoc(': 'array $array1, array $array2 [, array $... [, callable $value_compare_func]] | array',
\ 'array_uintersect_uassoc(': 'array $array1, array $array2 [, array $... [, callable $value_compare_func [, callable $key_compare_func]]] | array',
\ 'array_uintersect(': 'array $array1, array $array2 [, array $... [, callable $value_compare_func]] | array',
\ 'array_unique(': 'array $array [, int $sort_flags = SORT_STRING] | array',
\ 'array_unshift(': 'array &$array, mixed $value1 [, mixed $...] | int',
\ 'array_values(': 'array $array | array',
\ 'array_walk_recursive(': 'array &$array, callable $callback [, mixed $userdata = NULL] | bool',
\ 'array_walk(': 'array &$array, callable $callback [, mixed $userdata = NULL] | bool',
\ 'array(': '[ mixed $...] | array',
\ 'arsort(': 'array &$array [, int $sort_flags = SORT_REGULAR] | bool',
\ 'asort(': 'array &$array [, int $sort_flags = SORT_REGULAR] | bool',
\ 'compact(': 'mixed $varname1 [, mixed $...] | array',
\ 'count(': 'mixed $array_or_countable [, int $mode = COUNT_NORMAL] | int',
\ 'current(': 'array &$array | mixed',
\ 'each(': 'array &$array | array',
\ 'end(': 'array &$array | mixed',
\ 'extract(': 'array &$array [, int $flags = EXTR_OVERWRITE [, string $prefix = NULL]] | int',
\ 'in_array(': 'mixed $needle, array $haystack [, bool $strict = FALSE] | bool',
\ 'key_exists(': 'key_exists — Alias of array_key_exists()',
\ 'key(': 'array &$array | mixed',
\ 'krsort(': 'array &$array [, int $sort_flags = SORT_REGULAR] | bool',
\ 'ksort(': 'array &$array [, int $sort_flags = SORT_REGULAR] | bool',
\ 'list(': 'mixed $var1 [, mixed $...] | array',
\ 'natcasesort(': 'array &$array | bool',
\ 'natsort(': 'array &$array | bool',
\ 'next(': 'array &$array | mixed',
\ 'pos(': 'pos — Alias of current()',
\ 'prev(': 'array &$array | mixed',
\ 'range(': 'mixed $start, mixed $end [, number $step = 1] | array',
\ 'reset(': 'array &$array | mixed',
\ 'rsort(': 'array &$array [, int $sort_flags = SORT_REGULAR] | bool',
\ 'shuffle(': 'array &$array | bool',
\ 'sizeof(': 'sizeof — Alias of count()',
\ 'sort(': 'array &$array [, int $sort_flags = SORT_REGULAR] | bool',
\ 'uasort(': 'array &$array, callable $value_compare_func | bool',
\ 'uksort(': 'array &$array, callable $key_compare_func | bool',
\ 'usort(': 'array &$array, callable $value_compare_func | bool',
\ })
