call extend(g:php_builtin_functions, {
\ 'fann_cascadetrain_on_data(': 'resource $ann, resource $data, int $max_neurons, int $neurons_between_reports, float $desired_error | bool',
\ 'fann_cascadetrain_on_file(': 'resource $ann, string $filename, int $max_neurons, int $neurons_between_reports, float $desired_error | bool',
\ 'fann_clear_scaling_params(': 'resource $ann | bool',
\ 'fann_copy(': 'resource $ann | resource',
\ 'fann_create_from_file(': 'string $configuration_file | resource',
\ 'fann_create_shortcut_array(': 'int $num_layers, array $layers | resource',
\ 'fann_create_shortcut(': 'int $num_layers, int $num_neurons1, int $num_neurons2 [, int $...] | reference',
\ 'fann_create_sparse_array(': 'float $connection_rate, int $num_layers, array $layers | ReturnType',
\ 'fann_create_sparse(': 'float $connection_rate, int $num_layers, int $num_neurons1, int $num_neurons2 [, int $...] | ReturnType',
\ 'fann_create_standard_array(': 'int $num_layers, array $layers | resource',
\ 'fann_create_standard(': 'int $num_layers, int $num_neurons1, int $num_neurons2 [, int $...] | resource',
\ 'fann_create_train_from_callback(': 'int $num_data, int $num_input, int $num_output, collable $user_function | resource',
\ 'fann_create_train(': 'int $num_data, int $num_input, int $num_output | resource',
\ 'fann_descale_input(': 'resource $ann, array $input_vector | bool',
\ 'fann_descale_output(': 'resource $ann, array $output_vector | bool',
\ 'fann_descale_train(': 'resource $ann, resource $train_data | bool',
\ 'fann_destroy_train(': 'resource $train_data | bool',
\ 'fann_destroy(': 'resource $ann | bool',
\ 'fann_duplicate_train_data(': 'resource $data | resource',
\ 'fann_get_activation_function(': 'resource $ann, int $layer, int $neuron | int',
\ 'fann_get_activation_steepness(': 'resource $ann, int $layer, int $neuron | float',
\ 'fann_get_bias_array(': 'resource $ann | array',
\ 'fann_get_bit_fail_limit(': 'resource $ann | float',
\ 'fann_get_bit_fail(': 'resource $ann | int',
\ 'fann_get_cascade_activation_functions_count(': 'resource $ann | int',
\ 'fann_get_cascade_activation_functions(': 'resource $ann | array',
\ 'fann_get_cascade_activation_steepnesses_count(': 'resource $ann | int',
\ 'fann_get_cascade_activation_steepnesses(': 'resource $ann | array',
\ 'fann_get_cascade_candidate_change_fraction(': 'resource $ann | float',
\ 'fann_get_cascade_candidate_limit(': 'resource $ann | float',
\ 'fann_get_cascade_candidate_stagnation_epochs(': 'resource $ann | float',
\ 'fann_get_cascade_max_cand_epochs(': 'resource $ann | int',
\ 'fann_get_cascade_max_out_epochs(': 'resource $ann | int',
\ 'fann_get_cascade_min_cand_epochs(': 'resource $ann | int',
\ 'fann_get_cascade_min_out_epochs(': 'resource $ann | int',
\ 'fann_get_cascade_num_candidate_groups(': 'resource $ann | int',
\ 'fann_get_cascade_num_candidates(': 'resource $ann | int',
\ 'fann_get_cascade_output_change_fraction(': 'resource $ann | float',
\ 'fann_get_cascade_output_stagnation_epochs(': 'resource $ann | int',
\ 'fann_get_cascade_weight_multiplier(': 'resource $ann | float',
\ 'fann_get_connection_array(': 'resource $ann | array',
\ 'fann_get_connection_rate(': 'resource $ann | float',
\ 'fann_get_errno(': 'resource $errdat | int',
\ 'fann_get_errstr(': 'resource $errdat | string',
\ 'fann_get_layer_array(': 'resource $ann | array',
\ 'fann_get_learning_momentum(': 'resource $ann | float',
\ 'fann_get_learning_rate(': 'resource $ann | float',
\ 'fann_get_MSE(': 'resource $ann | float',
\ 'fann_get_network_type(': 'resource $ann | int',
\ 'fann_get_num_input(': 'resource $ann | int',
\ 'fann_get_num_layers(': 'resource $ann | int',
\ 'fann_get_num_output(': 'resource $ann | int',
\ 'fann_get_quickprop_decay(': 'resource $ann | float',
\ 'fann_get_quickprop_mu(': 'resource $ann | float',
\ 'fann_get_rprop_decrease_factor(': 'resource $ann | float',
\ 'fann_get_rprop_delta_max(': 'resource $ann | float',
\ 'fann_get_rprop_delta_min(': 'resource $ann | float',
\ 'fann_get_rprop_delta_zero(': 'resource $ann | ReturnType',
\ 'fann_get_rprop_increase_factor(': 'resource $ann | float',
\ 'fann_get_sarprop_step_error_shift(': 'resource $ann | float',
\ 'fann_get_sarprop_step_error_threshold_factor(': 'resource $ann | float',
\ 'fann_get_sarprop_temperature(': 'resource $ann | float',
\ 'fann_get_sarprop_weight_decay_shift(': 'resource $ann | float',
\ 'fann_get_total_connections(': 'resource $ann | int',
\ 'fann_get_total_neurons(': 'resource $ann | int',
\ 'fann_get_train_error_function(': 'resource $ann | int',
\ 'fann_get_train_stop_function(': 'resource $ann | int',
\ 'fann_get_training_algorithm(': 'resource $ann | int',
\ 'fann_init_weights(': 'resource $ann, resource $train_data | bool',
\ 'fann_length_train_data(': 'resource $data | int',
\ 'fann_merge_train_data(': 'resource $data1, resource $data2 | resource',
\ 'fann_num_input_train_data(': 'resource $data | int',
\ 'fann_num_output_train_data(': 'resource $data | int',
\ 'fann_print_error(': 'string $errdat | void',
\ 'fann_randomize_weights(': 'resource $ann, float $min_weight, float $max_weight | bool',
\ 'fann_read_train_from_file(': 'string $filename | resource',
\ 'fann_reset_errno(': 'resource $errdat | void',
\ 'fann_reset_errstr(': 'resource $errdat | void',
\ 'fann_reset_MSE(': 'string $ann | bool',
\ 'fann_run(': 'resource $ann, array $input | array',
\ 'fann_save_train(': 'resource $data, string $file_name | bool',
\ 'fann_save(': 'resource $ann, string $configuration_file | bool',
\ 'fann_scale_input_train_data(': 'resource $train_data, float $new_min, float $new_max | bool',
\ 'fann_scale_input(': 'resource $ann, array $input_vector | bool',
\ 'fann_scale_output_train_data(': 'resource $train_data, float $new_min, float $new_max | bool',
\ 'fann_scale_output(': 'resource $ann, array $output_vector | bool',
\ 'fann_scale_train_data(': 'resource $train_data, float $new_min, float $new_max | bool',
\ 'fann_scale_train(': 'resource $ann, resource $train_data | bool',
\ 'fann_set_activation_function_hidden(': 'resource $ann, int $activation_function | bool',
\ 'fann_set_activation_function_layer(': 'resource $ann, int $activation_function, int $layer | bool',
\ 'fann_set_activation_function_output(': 'resource $ann, int $activation_function | bool',
\ 'fann_set_activation_function(': 'resource $ann, int $activation_function, int $layer, int $neuron | bool',
\ 'fann_set_activation_steepness_hidden(': 'resource $ann, float $activation_steepness | bool',
\ 'fann_set_activation_steepness_layer(': 'resource $ann, float $activation_steepness, int $layer | bool',
\ 'fann_set_activation_steepness_output(': 'resource $ann, float $activation_steepness | bool',
\ 'fann_set_activation_steepness(': 'resource $ann, float $activation_steepness, int $layer, int $neuron | bool',
\ 'fann_set_bit_fail_limit(': 'resource $ann, float $bit_fail_limit | bool',
\ 'fann_set_callback(': 'resource $ann, collable $callback | bool',
\ 'fann_set_cascade_activation_functions(': 'resource $ann, array $cascade_activation_functions | bool',
\ 'fann_set_cascade_activation_steepnesses(': 'resource $ann, array $cascade_activation_steepnesses_count | bool',
\ 'fann_set_cascade_candidate_change_fraction(': 'resource $ann, float $cascade_candidate_change_fraction | bool',
\ 'fann_set_cascade_candidate_limit(': 'resource $ann, float $cascade_candidate_limit | bool',
\ 'fann_set_cascade_candidate_stagnation_epochs(': 'resource $ann, int $cascade_candidate_stagnation_epochs | bool',
\ 'fann_set_cascade_max_cand_epochs(': 'resource $ann, int $cascade_max_cand_epochs | bool',
\ 'fann_set_cascade_max_out_epochs(': 'resource $ann, int $cascade_max_out_epochs | bool',
\ 'fann_set_cascade_min_cand_epochs(': 'resource $ann, int $cascade_min_cand_epochs | bool',
\ 'fann_set_cascade_min_out_epochs(': 'resource $ann, int $cascade_min_out_epochs | bool',
\ 'fann_set_cascade_num_candidate_groups(': 'resource $ann, int $cascade_num_candidate_groups | bool',
\ 'fann_set_cascade_output_change_fraction(': 'resource $ann, float $cascade_output_change_fraction | bool',
\ 'fann_set_cascade_output_stagnation_epochs(': 'resource $ann, int $cascade_output_stagnation_epochs | bool',
\ 'fann_set_cascade_weight_multiplier(': 'resource $ann, float $cascade_weight_multiplier | bool',
\ 'fann_set_error_log(': 'resource $errdat, string $log_file | void',
\ 'fann_set_input_scaling_params(': 'resource $ann, resource $train_data, float $new_input_min, float $new_input_max | bool',
\ 'fann_set_learning_momentum(': 'resource $ann, float $learning_momentum | bool',
\ 'fann_set_learning_rate(': 'resource $ann, float $learning_rate | bool',
\ 'fann_set_output_scaling_params(': 'resource $ann, resource $train_data, float $new_output_min, float $new_output_max | bool',
\ 'fann_set_quickprop_decay(': 'resource $ann, float $quickprop_decay | bool',
\ 'fann_set_quickprop_mu(': 'resource $ann, float $quickprop_mu | bool',
\ 'fann_set_rprop_decrease_factor(': 'resource $ann, float $rprop_decrease_factor | bool',
\ 'fann_set_rprop_delta_max(': 'resource $ann, float $rprop_delta_max | bool',
\ 'fann_set_rprop_delta_min(': 'resource $ann, float $rprop_delta_min | bool',
\ 'fann_set_rprop_delta_zero(': 'resource $ann, float $rprop_delta_zero | bool',
\ 'fann_set_rprop_increase_factor(': 'resource $ann, float $rprop_increase_factor | bool',
\ 'fann_set_sarprop_step_error_shift(': 'resource $ann, float $sarprop_step_error_shift | bool',
\ 'fann_set_sarprop_step_error_threshold_factor(': 'resource $ann, float $sarprop_step_error_threshold_factor | bool',
\ 'fann_set_sarprop_temperature(': 'resource $ann, float $sarprop_temperature | bool',
\ 'fann_set_sarprop_weight_decay_shift(': 'resource $ann, float $sarprop_weight_decay_shift | bool',
\ 'fann_set_scaling_params(': 'resource $ann, resource $train_data, float $new_input_min, float $new_input_max, float $new_output_min, float $new_output_max | bool',
\ 'fann_set_train_error_function(': 'resource $ann, int $error_function | bool',
\ 'fann_set_train_stop_function(': 'resource $ann, int $stop_function | bool',
\ 'fann_set_training_algorithm(': 'resource $ann, int $training_algorithm | bool',
\ 'fann_set_weight_array(': 'resource $ann, array $connections | bool',
\ 'fann_set_weight(': 'resource $ann, int $from_neuron, int $to_neuron, float $weight | bool',
\ 'fann_shuffle_train_data(': 'resource $train_data | bool',
\ 'fann_subset_train_data(': 'resource $data, int $pos, int $length | resource',
\ 'fann_test_data(': 'resource $ann, resource $data | float',
\ 'fann_test(': 'resource $ann, array $input, array $desired_output | bool',
\ 'fann_train_epoch(': 'resource $ann, resource $data | float',
\ 'fann_train_on_data(': 'resource $ann, resource $data, int $max_epochs, int $epochs_between_reports, float $desired_error | bool',
\ 'fann_train_on_file(': 'resource $ann, string $filename, int $max_epochs, int $epochs_between_reports, float $desired_error | bool',
\ 'fann_train(': 'resource $ann, array $input, array $desired_output | bool',
\ })
