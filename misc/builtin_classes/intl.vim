call extend(g:php_builtin_classes, {
\'Collator': {
\   'constants': {
\   },
\   'properties': {
\   },
\   'static_properties': {
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $locale', 'return_type': ''},
\     'asort': { 'signature': 'array &$arr [, int $sort_flag] | bool', 'return_type': 'bool'},
\     'compare': { 'signature': 'string $str1, string $str2 | int', 'return_type': 'int'},
\     'getAttribute': { 'signature': 'int $attr | int', 'return_type': 'int'},
\     'getErrorCode': { 'signature': 'void | int', 'return_type': 'int'},
\     'getErrorMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLocale': { 'signature': 'int $type | string', 'return_type': 'string'},
\     'getSortKey': { 'signature': 'string $str | string', 'return_type': 'string'},
\     'getStrength': { 'signature': 'void | int', 'return_type': 'int'},
\     'setAttribute': { 'signature': 'int $attr, int $val | bool', 'return_type': 'bool'},
\     'setStrength': { 'signature': 'int $strength | bool', 'return_type': 'bool'},
\     'sortWithSortKeys': { 'signature': 'array &$arr | bool', 'return_type': 'bool'},
\     'sort': { 'signature': 'array &$arr [, int $sort_flag] | bool', 'return_type': 'bool'},
\   },
\   'static_methods': {
\     'create': { 'signature': 'string $locale | Collator', 'return_type': 'Collator'},
\   },
\},
\'IntlBreakIterator': {
\   'constants': {
\     'DONE': '-1',
\     'WORD_NONE': '0',
\     'WORD_NONE_LIMIT': '100',
\     'WORD_NUMBER': '100',
\     'WORD_NUMBER_LIMIT': '200',
\     'WORD_LETTER': '200',
\     'WORD_LETTER_LIMIT': '300',
\     'WORD_KANA': '300',
\     'WORD_KANA_LIMIT': '400',
\     'WORD_IDEO': '400',
\     'WORD_IDEO_LIMIT': '500',
\     'LINE_SOFT': '0',
\     'LINE_SOFT_LIMIT': '100',
\     'LINE_HARD': '100',
\     'LINE_HARD_LIMIT': '200',
\     'SENTENCE_TERM': '0',
\     'SENTENCE_TERM_LIMIT': '100',
\     'SENTENCE_SEP': '100',
\     'SENTENCE_SEP_LIMIT': '200',
\   },
\   'properties': {
\   },
\   'static_properties': {
\   },
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'current': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'first': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'following': { 'signature': 'string $"offset" | ReturnType', 'return_type': 'ReturnType'},
\     'getErrorCode': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'intl_get_error_code': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'getErrorMessage': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'intl_get_error_message': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'getLocale': { 'signature': 'string $"locale_type" | ReturnType', 'return_type': 'ReturnType'},
\     'getPartsIterator': { 'signature': '[ string $"key_type"] | ReturnType', 'return_type': 'ReturnType'},
\     'getText': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'isBoundary': { 'signature': 'string $"offset" | ReturnType', 'return_type': 'ReturnType'},
\     'last': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'next': { 'signature': '[ string $"offset"] | ReturnType', 'return_type': 'ReturnType'},
\     'preceding': { 'signature': 'string $"offset" | ReturnType', 'return_type': 'ReturnType'},
\     'previous': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'setText': { 'signature': 'string $"text" | ReturnType', 'return_type': 'ReturnType'},
\   },
\   'static_methods': {
\     'createCharacterInstance': { 'signature': '[ string $"locale"] | ReturnType', 'return_type': 'ReturnType'},
\     'createCodePointInstance': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'createLineInstance': { 'signature': '[ string $"locale"] | ReturnType', 'return_type': 'ReturnType'},
\     'createSentenceInstance': { 'signature': '[ string $"locale"] | ReturnType', 'return_type': 'ReturnType'},
\     'createTitleInstance': { 'signature': '[ string $"locale"] | ReturnType', 'return_type': 'ReturnType'},
\     'createWordInstance': { 'signature': '[ string $"locale"] | ReturnType', 'return_type': 'ReturnType'},
\   },
\},
\'IntlCalendar': {
\   'constants': {
\     'FIELD_ERA': '0',
\     'FIELD_YEAR': '1',
\     'FIELD_MONTH': '2',
\     'FIELD_WEEK_OF_YEAR': '3',
\     'FIELD_WEEK_OF_MONTH': '4',
\     'FIELD_DATE': '5',
\     'FIELD_DAY_OF_YEAR': '6',
\     'FIELD_DAY_OF_WEEK': '7',
\     'FIELD_DAY_OF_WEEK_IN_MONTH': '8',
\     'FIELD_AM_PM': '9',
\     'FIELD_HOUR': '10',
\     'FIELD_HOUR_OF_DAY': '11',
\     'FIELD_MINUTE': '12',
\     'FIELD_SECOND': '13',
\     'FIELD_MILLISECOND': '14',
\     'FIELD_ZONE_OFFSET': '15',
\     'FIELD_DST_OFFSET': '16',
\     'FIELD_YEAR_WOY': '17',
\     'FIELD_DOW_LOCAL': '18',
\     'FIELD_EXTENDED_YEAR': '19',
\     'FIELD_JULIAN_DAY': '20',
\     'FIELD_MILLISECONDS_IN_DAY': '21',
\     'FIELD_IS_LEAP_MONTH': '22',
\     'FIELD_FIELD_COUNT': '23',
\     'FIELD_DAY_OF_MONTH': '5',
\     'DOW_SUNDAY': '1',
\     'DOW_MONDAY': '2',
\     'DOW_TUESDAY': '3',
\     'DOW_WEDNESDAY': '4',
\     'DOW_THURSDAY': '5',
\     'DOW_FRIDAY': '6',
\     'DOW_SATURDAY': '7',
\     'DOW_TYPE_WEEKDAY': '0',
\     'DOW_TYPE_WEEKEND': '1',
\     'DOW_TYPE_WEEKEND_OFFSET': '2',
\     'DOW_TYPE_WEEKEND_CEASE': '3',
\     'WALLTIME_FIRST': '1',
\     'WALLTIME_LAST': '0',
\     'WALLTIME_NEXT_VALID': '2',
\   },
\   'properties': {
\   },
\   'static_properties': {
\   },
\   'methods': {
\     'add': { 'signature': 'int $field, int $amount | bool', 'return_type': 'bool'},
\     'after': { 'signature': 'IntlCalendar $calendar | bool', 'return_type': 'bool'},
\     'before': { 'signature': 'IntlCalendar $calendar | bool', 'return_type': 'bool'},
\     'clear': { 'signature': '[ int $field = NULL] | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'equals': { 'signature': 'IntlCalendar $calendar | bool', 'return_type': 'bool'},
\     'fieldDifference': { 'signature': 'float $when, int $field | int', 'return_type': 'int'},
\     'get': { 'signature': 'int $field | int', 'return_type': 'int'},
\     'getActualMaximum': { 'signature': 'int $field | int', 'return_type': 'int'},
\     'getActualMinimum': { 'signature': 'int $field | int', 'return_type': 'int'},
\     'getDayOfWeekType': { 'signature': 'int $dayOfWeek | int', 'return_type': 'int'},
\     'getErrorCode': { 'signature': 'void | int', 'return_type': 'int'},
\     'getErrorMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getFirstDayOfWeek': { 'signature': 'void | int', 'return_type': 'int'},
\     'getGreatestMinimum': { 'signature': 'int $field | int', 'return_type': 'int'},
\     'getLeastMaximum': { 'signature': 'int $field | int', 'return_type': 'int'},
\     'getLocale': { 'signature': 'int $localeType | string', 'return_type': 'string'},
\     'getMaximum': { 'signature': 'int $field | int', 'return_type': 'int'},
\     'getMinimalDaysInFirstWeek': { 'signature': 'void | int', 'return_type': 'int'},
\     'getMinimum': { 'signature': 'int $field | int', 'return_type': 'int'},
\     'getRepeatedWallTimeOption': { 'signature': 'void | int', 'return_type': 'int'},
\     'getSkippedWallTimeOption': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTime': { 'signature': 'void | float', 'return_type': 'float'},
\     'getTimeZone': { 'signature': 'void | IntlTimeZone', 'return_type': 'IntlTimeZone'},
\     'getType': { 'signature': 'void | string', 'return_type': 'string'},
\     'getWeekendTransition': { 'signature': 'string $dayOfWeek | int', 'return_type': 'int'},
\     'inDaylightTime': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isEquivalentTo': { 'signature': 'IntlCalendar $calendar | bool', 'return_type': 'bool'},
\     'isLenient': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'isSet': { 'signature': 'int $field | bool', 'return_type': 'bool'},
\     'isWeekend': { 'signature': '[ float $date = NULL] | bool', 'return_type': 'bool'},
\     'roll': { 'signature': 'int $field, mixed $amountOrUpOrDown | bool', 'return_type': 'bool'},
\     'set': { 'signature': 'int $year, int $month [, int $dayOfMonth = NULL [, int $hour = NULL [, int $minute = NULL [, int $second = NULL]]]] | bool', 'return_type': 'bool'},
\     'setFirstDayOfWeek': { 'signature': 'int $dayOfWeek | bool', 'return_type': 'bool'},
\     'setLenient': { 'signature': 'string $isLenient | ReturnType', 'return_type': 'ReturnType'},
\     'setRepeatedWallTimeOption': { 'signature': 'int $wallTimeOption | bool', 'return_type': 'bool'},
\     'setSkippedWallTimeOption': { 'signature': 'int $wallTimeOption | bool', 'return_type': 'bool'},
\     'setTime': { 'signature': 'float $date | bool', 'return_type': 'bool'},
\     'setTimeZone': { 'signature': 'mixed $timeZone | bool', 'return_type': 'bool'},
\     'toDateTime': { 'signature': 'void | DateTime', 'return_type': 'DateTime'},
\   },
\   'static_methods': {
\     'createInstance': { 'signature': '[ mixed $timeZone = NULL [, string $locale = NULL]] | IntlCalendar', 'return_type': 'IntlCalendar'},
\     'fromDateTime': { 'signature': 'mixed $dateTime | IntlCalendar', 'return_type': 'IntlCalendar'},
\     'getAvailableLocales': { 'signature': 'void | array', 'return_type': 'array'},
\     'getKeywordValuesForLocale': { 'signature': 'string $key, string $locale, boolean $commonlyUsed | Iterator', 'return_type': 'Iterator'},
\     'getNow': { 'signature': 'void | float', 'return_type': 'float'},
\   },
\},
\'IntlCodePointBreakIterator': {
\   'constants': {
\     'DONE': '-1',
\     'WORD_NONE': '0',
\     'WORD_NONE_LIMIT': '100',
\     'WORD_NUMBER': '100',
\     'WORD_NUMBER_LIMIT': '200',
\     'WORD_LETTER': '200',
\     'WORD_LETTER_LIMIT': '300',
\     'WORD_KANA': '300',
\     'WORD_KANA_LIMIT': '400',
\     'WORD_IDEO': '400',
\     'WORD_IDEO_LIMIT': '500',
\     'LINE_SOFT': '0',
\     'LINE_SOFT_LIMIT': '100',
\     'LINE_HARD': '100',
\     'LINE_HARD_LIMIT': '200',
\     'SENTENCE_TERM': '0',
\     'SENTENCE_TERM_LIMIT': '100',
\     'SENTENCE_SEP': '100',
\     'SENTENCE_SEP_LIMIT': '200',
\   },
\   'properties': {
\   },
\   'static_properties': {
\   },
\   'methods': {
\     'getLastCodePoint': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'current': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'first': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'following': { 'signature': 'string $"offset" | ReturnType', 'return_type': 'ReturnType'},
\     'getErrorCode': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'intl_get_error_code': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'getErrorMessage': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'intl_get_error_message': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'getLocale': { 'signature': 'string $"locale_type" | ReturnType', 'return_type': 'ReturnType'},
\     'getPartsIterator': { 'signature': '[ string $"key_type"] | ReturnType', 'return_type': 'ReturnType'},
\     'getText': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'isBoundary': { 'signature': 'string $"offset" | ReturnType', 'return_type': 'ReturnType'},
\     'last': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'next': { 'signature': '[ string $"offset"] | ReturnType', 'return_type': 'ReturnType'},
\     'preceding': { 'signature': 'string $"offset" | ReturnType', 'return_type': 'ReturnType'},
\     'previous': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'setText': { 'signature': 'string $"text" | ReturnType', 'return_type': 'ReturnType'},
\   },
\   'static_methods': {
\     'createCharacterInstance': { 'signature': '[ string $"locale"] | ReturnType', 'return_type': 'ReturnType'},
\     'createCodePointInstance': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'createLineInstance': { 'signature': '[ string $"locale"] | ReturnType', 'return_type': 'ReturnType'},
\     'createSentenceInstance': { 'signature': '[ string $"locale"] | ReturnType', 'return_type': 'ReturnType'},
\     'createTitleInstance': { 'signature': '[ string $"locale"] | ReturnType', 'return_type': 'ReturnType'},
\     'createWordInstance': { 'signature': '[ string $"locale"] | ReturnType', 'return_type': 'ReturnType'},
\   },
\},
\'IntlDateFormatter': {
\   'constants': {
\   },
\   'properties': {
\   },
\   'static_properties': {
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $locale, int $datetype, int $timetype [, mixed $timezone = NULL [, mixed $calendar = NULL [, string $pattern = '''']]]', 'return_type': ''},
\     'format': { 'signature': 'mixed $value | string', 'return_type': 'string'},
\     'getCalendar': { 'signature': 'void | int', 'return_type': 'int'},
\     'getDateType': { 'signature': 'void | int', 'return_type': 'int'},
\     'getErrorCode': { 'signature': 'void | int', 'return_type': 'int'},
\     'getErrorMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLocale': { 'signature': '[ int $which] | string', 'return_type': 'string'},
\     'getPattern': { 'signature': 'void | string', 'return_type': 'string'},
\     'getTimeType': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTimeZoneId': { 'signature': 'void | string', 'return_type': 'string'},
\     'getCalendarObject': { 'signature': 'void | IntlCalendar', 'return_type': 'IntlCalendar'},
\     'getTimeZone': { 'signature': 'void | IntlTimeZone', 'return_type': 'IntlTimeZone'},
\     'isLenient': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'localtime': { 'signature': 'string $value [, int &$position] | array', 'return_type': 'array'},
\     'parse': { 'signature': 'string $value [, int &$position] | int', 'return_type': 'int'},
\     'setCalendar': { 'signature': 'mixed $which | bool', 'return_type': 'bool'},
\     'setLenient': { 'signature': 'bool $lenient | bool', 'return_type': 'bool'},
\     'setPattern': { 'signature': 'string $pattern | bool', 'return_type': 'bool'},
\     'setTimeZoneId': { 'signature': 'string $zone | bool', 'return_type': 'bool'},
\     'setTimeZone': { 'signature': 'mixed $zone | boolean', 'return_type': 'boolean'},
\   },
\   'static_methods': {
\     'create': { 'signature': 'string $locale, int $datetype, int $timetype [, mixed $timezone = NULL [, mixed $calendar = NULL [, string $pattern = '''']]] | IntlDateFormatter', 'return_type': 'IntlDateFormatter'},
\     'formatObject': { 'signature': 'object $object [, mixed $format = NULL [, string $locale = NULL]] | string', 'return_type': 'string'},
\   },
\},
\'IntlException': {
\   'constants': {
\   },
\   'properties': {
\     'message': { 'initializer': '', 'type': 'string'},
\     'code': { 'initializer': '', 'type': 'int'},
\     'file': { 'initializer': '', 'type': 'string'},
\     'line': { 'initializer': '', 'type': 'int'},
\   },
\   'static_properties': {
\   },
\   'methods': {
\     'getMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPrevious': { 'signature': 'void | Exception', 'return_type': 'Exception'},
\     'getCode': { 'signature': 'void | mixed', 'return_type': 'mixed'},
\     'getFile': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLine': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTrace': { 'signature': 'void | array', 'return_type': 'array'},
\     'getTraceAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__toString': { 'signature': 'void | string', 'return_type': 'string'},
\     '__clone': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\   'static_methods': {
\   },
\},
\'IntlIterator': {
\   'constants': {
\   },
\   'properties': {
\   },
\   'static_properties': {
\   },
\   'methods': {
\     'current': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'key': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'next': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'rewind': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'valid': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\   },
\   'static_methods': {
\   },
\},
\'IntlPartsIterator': {
\   'constants': {
\     'KEY_SEQUENTIAL': '0',
\     'KEY_LEFT': '1',
\     'KEY_RIGHT': '2',
\   },
\   'properties': {
\   },
\   'static_properties': {
\   },
\   'methods': {
\     'getBreakIterator': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'current': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'key': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'next': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'rewind': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'valid': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\   },
\   'static_methods': {
\   },
\},
\'IntlRuleBasedBreakIterator': {
\   'constants': {
\     'DONE': '-1',
\     'WORD_NONE': '0',
\     'WORD_NONE_LIMIT': '100',
\     'WORD_NUMBER': '100',
\     'WORD_NUMBER_LIMIT': '200',
\     'WORD_LETTER': '200',
\     'WORD_LETTER_LIMIT': '300',
\     'WORD_KANA': '300',
\     'WORD_KANA_LIMIT': '400',
\     'WORD_IDEO': '400',
\     'WORD_IDEO_LIMIT': '500',
\     'LINE_SOFT': '0',
\     'LINE_SOFT_LIMIT': '100',
\     'LINE_HARD': '100',
\     'LINE_HARD_LIMIT': '200',
\     'SENTENCE_TERM': '0',
\     'SENTENCE_TERM_LIMIT': '100',
\     'SENTENCE_SEP': '100',
\     'SENTENCE_SEP_LIMIT': '200',
\   },
\   'properties': {
\   },
\   'static_properties': {
\   },
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'getBinaryRules': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'getRules': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'getRuleStatus': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'getRuleStatusVec': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'current': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'first': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'following': { 'signature': 'string $"offset" | ReturnType', 'return_type': 'ReturnType'},
\     'getErrorCode': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'intl_get_error_code': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'getErrorMessage': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'intl_get_error_message': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'getLocale': { 'signature': 'string $"locale_type" | ReturnType', 'return_type': 'ReturnType'},
\     'getPartsIterator': { 'signature': '[ string $"key_type"] | ReturnType', 'return_type': 'ReturnType'},
\     'getText': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'isBoundary': { 'signature': 'string $"offset" | ReturnType', 'return_type': 'ReturnType'},
\     'last': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'next': { 'signature': '[ string $"offset"] | ReturnType', 'return_type': 'ReturnType'},
\     'preceding': { 'signature': 'string $"offset" | ReturnType', 'return_type': 'ReturnType'},
\     'previous': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'setText': { 'signature': 'string $"text" | ReturnType', 'return_type': 'ReturnType'},
\   },
\   'static_methods': {
\     'createCharacterInstance': { 'signature': '[ string $"locale"] | ReturnType', 'return_type': 'ReturnType'},
\     'createCodePointInstance': { 'signature': 'void | ReturnType', 'return_type': 'ReturnType'},
\     'createLineInstance': { 'signature': '[ string $"locale"] | ReturnType', 'return_type': 'ReturnType'},
\     'createSentenceInstance': { 'signature': '[ string $"locale"] | ReturnType', 'return_type': 'ReturnType'},
\     'createTitleInstance': { 'signature': '[ string $"locale"] | ReturnType', 'return_type': 'ReturnType'},
\     'createWordInstance': { 'signature': '[ string $"locale"] | ReturnType', 'return_type': 'ReturnType'},
\   },
\},
\'IntlTimeZone': {
\   'constants': {
\     'DISPLAY_SHORT': '1',
\     'DISPLAY_LONG': '2',
\   },
\   'properties': {
\   },
\   'static_properties': {
\   },
\   'methods': {
\     'getDisplayName': { 'signature': '[ bool $isDaylight [, integer $style [, string $locale]]] | string', 'return_type': 'string'},
\     'getDSTSavings': { 'signature': 'void | integer', 'return_type': 'integer'},
\     'getErrorCode': { 'signature': 'void | integer', 'return_type': 'integer'},
\     'getErrorMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getID': { 'signature': 'void | string', 'return_type': 'string'},
\     'getOffset': { 'signature': 'float $date, bool $local, integer &$rawOffset, integer &$dstOffset | integer', 'return_type': 'integer'},
\     'getRawOffset': { 'signature': 'void | integer', 'return_type': 'integer'},
\     'hasSameRules': { 'signature': 'IntlTimeZone $otherTimeZone | bool', 'return_type': 'bool'},
\     'toDateTimeZone': { 'signature': 'void | DateTimeZone', 'return_type': 'DateTimeZone'},
\     'useDaylightTime': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\   'static_methods': {
\     'countEquivalentIDs': { 'signature': 'string $zoneId | integer', 'return_type': 'integer'},
\     'createDefault': { 'signature': 'void | IntlTimeZone', 'return_type': 'IntlTimeZone'},
\     'createEnumeration': { 'signature': '[ mixed $countryOrRawOffset] | IntlIterator', 'return_type': 'IntlIterator'},
\     'createTimeZone': { 'signature': 'string $zoneId | IntlTimeZone', 'return_type': 'IntlTimeZone'},
\     'fromDateTimeZone': { 'signature': 'DateTimeZone $zoneId | IntlTimeZone', 'return_type': 'IntlTimeZone'},
\     'getCanonicalID': { 'signature': 'string $zoneId [, bool &$isSystemID] | string', 'return_type': 'string'},
\     'getEquivalentID': { 'signature': 'string $zoneId, integer $index | string', 'return_type': 'string'},
\     'getGMT': { 'signature': 'void | IntlTimeZone', 'return_type': 'IntlTimeZone'},
\     'getTZDataVersion': { 'signature': 'void | string', 'return_type': 'string'},
\   },
\},
\'Locale': {
\   'constants': {
\   },
\   'properties': {
\   },
\   'static_properties': {
\   },
\   'methods': {
\   },
\   'static_methods': {
\     'acceptFromHttp': { 'signature': 'string $header | string', 'return_type': 'string'},
\     'canonicalize': { 'signature': 'string $locale | string', 'return_type': 'string'},
\     'composeLocale': { 'signature': 'array $subtags | string', 'return_type': 'string'},
\     'filterMatches': { 'signature': 'string $langtag, string $locale [, bool $canonicalize = false] | bool', 'return_type': 'bool'},
\     'getAllVariants': { 'signature': 'string $locale | array', 'return_type': 'array'},
\     'getDefault': { 'signature': 'void | string', 'return_type': 'string'},
\     'getDisplayLanguage': { 'signature': 'string $locale [, string $in_locale] | string', 'return_type': 'string'},
\     'getDisplayName': { 'signature': 'string $locale [, string $in_locale] | string', 'return_type': 'string'},
\     'getDisplayRegion': { 'signature': 'string $locale [, string $in_locale] | string', 'return_type': 'string'},
\     'getDisplayScript': { 'signature': 'string $locale [, string $in_locale] | string', 'return_type': 'string'},
\     'getDisplayVariant': { 'signature': 'string $locale [, string $in_locale] | string', 'return_type': 'string'},
\     'getKeywords': { 'signature': 'string $locale | array', 'return_type': 'array'},
\     'getPrimaryLanguage': { 'signature': 'string $locale | string', 'return_type': 'string'},
\     'getRegion': { 'signature': 'string $locale | string', 'return_type': 'string'},
\     'getScript': { 'signature': 'string $locale | string', 'return_type': 'string'},
\     'lookup': { 'signature': 'array $langtag, string $locale [, bool $canonicalize = false [, string $default]] | string', 'return_type': 'string'},
\     'parseLocale': { 'signature': 'string $locale | array', 'return_type': 'array'},
\     'setDefault': { 'signature': 'string $locale | bool', 'return_type': 'bool'},
\   },
\},
\'MessageFormatter': {
\   'constants': {
\   },
\   'properties': {
\   },
\   'static_properties': {
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $locale, string $pattern', 'return_type': ''},
\     'format': { 'signature': 'array $args | string', 'return_type': 'string'},
\     'getErrorCode': { 'signature': 'void | int', 'return_type': 'int'},
\     'getErrorMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLocale': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPattern': { 'signature': 'void | string', 'return_type': 'string'},
\     'parse': { 'signature': 'string $value | array', 'return_type': 'array'},
\     'setPattern': { 'signature': 'string $pattern | bool', 'return_type': 'bool'},
\   },
\   'static_methods': {
\     'create': { 'signature': 'string $locale, string $pattern | MessageFormatter', 'return_type': 'MessageFormatter'},
\     'formatMessage': { 'signature': 'string $locale, string $pattern, array $args | string', 'return_type': 'string'},
\     'parseMessage': { 'signature': 'string $locale, string $pattern, string $source | array', 'return_type': 'array'},
\   },
\},
\'Normalizer': {
\   'constants': {
\   },
\   'properties': {
\   },
\   'static_properties': {
\   },
\   'methods': {
\   },
\   'static_methods': {
\     'isNormalized': { 'signature': 'string $input [, string $form = Normalizer::FORM_C] | bool', 'return_type': 'bool'},
\     'normalize': { 'signature': 'string $input [, string $form = Normalizer::FORM_C] | string', 'return_type': 'string'},
\   },
\},
\'NumberFormatter': {
\   'constants': {
\   },
\   'properties': {
\   },
\   'static_properties': {
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $locale, int $style [, string $pattern]', 'return_type': ''},
\     'formatCurrency': { 'signature': 'float $value, string $currency | string', 'return_type': 'string'},
\     'format': { 'signature': 'number $value [, int $type] | string', 'return_type': 'string'},
\     'getAttribute': { 'signature': 'int $attr | int', 'return_type': 'int'},
\     'getErrorCode': { 'signature': 'void | int', 'return_type': 'int'},
\     'getErrorMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getLocale': { 'signature': '[ int $type] | string', 'return_type': 'string'},
\     'getPattern': { 'signature': 'void | string', 'return_type': 'string'},
\     'getSymbol': { 'signature': 'int $attr | string', 'return_type': 'string'},
\     'getTextAttribute': { 'signature': 'int $attr | string', 'return_type': 'string'},
\     'parseCurrency': { 'signature': 'string $value, string &$currency [, int &$position] | float', 'return_type': 'float'},
\     'parse': { 'signature': 'string $value [, int $type [, int &$position]] | mixed', 'return_type': 'mixed'},
\     'setAttribute': { 'signature': 'int $attr, int $value | bool', 'return_type': 'bool'},
\     'setPattern': { 'signature': 'string $pattern | bool', 'return_type': 'bool'},
\     'setSymbol': { 'signature': 'int $attr, string $value | bool', 'return_type': 'bool'},
\     'setTextAttribute': { 'signature': 'int $attr, string $value | bool', 'return_type': 'bool'},
\   },
\   'static_methods': {
\     'create': { 'signature': 'string $locale, int $style [, string $pattern] | NumberFormatter', 'return_type': 'NumberFormatter'},
\   },
\},
\'ResourceBundle': {
\   'constants': {
\   },
\   'properties': {
\   },
\   'static_properties': {
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $locale, string $bundlename [, bool $fallback]', 'return_type': ''},
\     'count': { 'signature': 'void | int', 'return_type': 'int'},
\     'getErrorCode': { 'signature': 'void | int', 'return_type': 'int'},
\     'getErrorMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'get': { 'signature': 'string|int $index | mixed', 'return_type': 'mixed'},
\     'getLocales': { 'signature': 'string $bundlename | array', 'return_type': 'array'},
\   },
\   'static_methods': {
\     'create': { 'signature': 'string $locale, string $bundlename [, bool $fallback] | ResourceBundle', 'return_type': 'ResourceBundle'},
\   },
\},
\'Spoofchecker': {
\   'constants': {
\     'SINGLE_SCRIPT_CONFUSABLE': '1',
\     'MIXED_SCRIPT_CONFUSABLE': '2',
\     'WHOLE_SCRIPT_CONFUSABLE': '4',
\     'ANY_CASE': '8',
\     'SINGLE_SCRIPT': '16',
\     'INVISIBLE': '32',
\     'CHAR_LIMIT': '64',
\   },
\   'properties': {
\   },
\   'static_properties': {
\   },
\   'methods': {
\     'areConfusable': { 'signature': 'string $s1, string $s2 [, string &$error] | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'isSuspicious': { 'signature': 'string $text [, string &$error] | bool', 'return_type': 'bool'},
\     'setAllowedLocales': { 'signature': 'string $locale_list | void', 'return_type': 'void'},
\     'setChecks': { 'signature': 'string $checks | void', 'return_type': 'void'},
\   },
\   'static_methods': {
\   },
\},
\'Transliterator': {
\   'constants': {
\     'FORWARD': '0',
\     'REVERSE': '1',
\   },
\   'properties': {
\     'id': { 'initializer': '', 'type': ''},
\   },
\   'static_properties': {
\   },
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'createInverse': { 'signature': 'void | Transliterator', 'return_type': 'Transliterator'},
\     'getErrorCode': { 'signature': 'void | int', 'return_type': 'int'},
\     'getErrorMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'transliterate': { 'signature': 'string $subject [, int $start [, int $end]] | string', 'return_type': 'string'},
\   },
\   'static_methods': {
\     'create': { 'signature': 'string $id [, int $direction] | Transliterator', 'return_type': 'Transliterator'},
\     'createFromRules': { 'signature': 'string $rules [, string $direction] | Transliterator', 'return_type': 'Transliterator'},
\     'listIDs': { 'signature': 'void | array', 'return_type': 'array'},
\   },
\},
\'UConverter': {
\   'constants': {
\     'REASON_UNASSIGNED': '0',
\     'REASON_ILLEGAL': '1',
\     'REASON_IRREGULAR': '2',
\     'REASON_RESET': '3',
\     'REASON_CLOSE': '4',
\     'REASON_CLONE': '5',
\     'UNSUPPORTED_CONVERTER': '-1',
\     'SBCS': '0',
\     'DBCS': '1',
\     'MBCS': '2',
\     'LATIN_1': '3',
\     'UTF8': '4',
\     'UTF16_BigEndian': '5',
\     'UTF16_LittleEndian': '6',
\     'UTF32_BigEndian': '7',
\     'UTF32_LittleEndian': '8',
\     'EBCDIC_STATEFUL': '9',
\     'ISO_2022': '10',
\     'LMBCS_1': '11',
\     'LMBCS_2': '12',
\     'LMBCS_3': '13',
\     'LMBCS_4': '14',
\     'LMBCS_5': '15',
\     'LMBCS_6': '16',
\     'LMBCS_8': '17',
\     'LMBCS_11': '18',
\     'LMBCS_16': '19',
\     'LMBCS_17': '20',
\     'LMBCS_18': '21',
\     'LMBCS_19': '22',
\     'LMBCS_LAST': '22',
\     'HZ': '23',
\     'SCSU': '24',
\     'ISCII': '25',
\     'US_ASCII': '26',
\     'UTF7': '27',
\     'BOCU1': '28',
\     'UTF16': '29',
\     'UTF32': '30',
\     'CESU8': '31',
\     'IMAP_MAILBOX': '32',
\   },
\   'properties': {
\   },
\   'static_properties': {
\   },
\   'methods': {
\     '__construct': { 'signature': '[ string $destination_encoding [, string $source_encoding]]', 'return_type': ''},
\     'convert': { 'signature': 'string $str [, bool $reverse] | string', 'return_type': 'string'},
\     'fromUCallback': { 'signature': 'integer $reason, string $source, string $codePoint, integer &$error | mixed', 'return_type': 'mixed'},
\     'getDestinationEncoding': { 'signature': 'void | string', 'return_type': 'string'},
\     'getDestinationType': { 'signature': 'void | integer', 'return_type': 'integer'},
\     'getErrorCode': { 'signature': 'void | integer', 'return_type': 'integer'},
\     'getErrorMessage': { 'signature': 'void | string', 'return_type': 'string'},
\     'getSourceEncoding': { 'signature': 'void | string', 'return_type': 'string'},
\     'getSourceType': { 'signature': 'void | integer', 'return_type': 'integer'},
\     'getSubstChars': { 'signature': 'void | string', 'return_type': 'string'},
\     'setDestinationEncoding': { 'signature': 'string $encoding | void', 'return_type': 'void'},
\     'setSourceEncoding': { 'signature': 'string $encoding | void', 'return_type': 'void'},
\     'setSubstChars': { 'signature': 'string $chars | void', 'return_type': 'void'},
\     'toUCallback': { 'signature': 'integer $reason, string $source, string $codeUnits, integer &$error | mixed', 'return_type': 'mixed'},
\   },
\   'static_methods': {
\     'getAliases': { 'signature': '[ string $name] | array', 'return_type': 'array'},
\     'getAvailable': { 'signature': 'void | array', 'return_type': 'array'},
\     'getStandards': { 'signature': 'void | array', 'return_type': 'array'},
\     'reasonText': { 'signature': '[ integer $reason] | string', 'return_type': 'string'},
\     'transcode': { 'signature': 'string $str, string $toEncoding, string $fromEncoding [, array $options] | string', 'return_type': 'string'},
\   },
\},
\})
