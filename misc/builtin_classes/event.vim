call extend(g:php_builtin_classes, {
\'event': {
\   'name': 'Event',
\   'constants': {
\     'ET': '32',
\     'PERSIST': '16',
\     'READ': '2',
\     'WRITE': '4',
\     'SIGNAL': '8',
\     'TIMEOUT': '1',
\   },
\   'properties': {
\     'pending': { 'initializer': '', 'type': 'bool'},
\   },
\   'static_properties': {
\   },
\   'methods': {
\     'add': { 'signature': '[ double $timeout] | void', 'return_type': 'void'},
\     'addSignal': { 'signature': '[ double $timeout] | bool', 'return_type': 'bool'},
\     'addTimer': { 'signature': '[ double $timeout] | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': 'EventBase $base, mixed $fd, int $what, callable $cb [, mixed $arg = NULL]', 'return_type': ''},
\     'del': { 'signature': 'void | void', 'return_type': 'void'},
\     'delSignal': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'delTimer': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'free': { 'signature': 'void | void', 'return_type': 'void'},
\     'pending': { 'signature': 'int $flags | bool', 'return_type': 'bool'},
\     'set': { 'signature': 'EventBase $base, mixed $fd [, int $what [, callable $cb [, mixed $arg]]] | bool', 'return_type': 'bool'},
\     'setPriority': { 'signature': 'int $priority | bool', 'return_type': 'bool'},
\     'setTimer': { 'signature': 'EventBase $base, callable $cb [, mixed $arg] | bool', 'return_type': 'bool'},
\   },
\   'static_methods': {
\     'getSupportedMethods': { 'signature': 'void | void', 'return_type': 'void'},
\     'signal': { 'signature': 'EventBase $base, int $signum, callable $cb [, mixed $arg] | Event', 'return_type': 'Event'},
\     'timer': { 'signature': 'EventBase $base, callable $cb [, mixed $arg] | Event', 'return_type': 'Event'},
\   },
\},
\'eventbase': {
\   'name': 'EventBase',
\   'constants': {
\     'LOOP_ONCE': '1',
\     'LOOP_NONBLOCK': '2',
\     'NOLOCK': '1',
\     'STARTUP_IOCP': '4',
\     'NO_CACHE_TIME': '8',
\     'EPOLL_USE_CHANGELIST': '16',
\   },
\   'properties': {
\   },
\   'static_properties': {
\   },
\   'methods': {
\     '__construct': { 'signature': '[ EventConfig $cfg]', 'return_type': ''},
\     'dispatch': { 'signature': 'void | void', 'return_type': 'void'},
\     'exit': { 'signature': '[ double $timeout] | void', 'return_type': 'void'},
\     'getFeatures': { 'signature': 'void | int', 'return_type': 'int'},
\     'getMethod': { 'signature': '[ EventConfig $cfg] | string', 'return_type': 'string'},
\     'getTimeOfDayCached': { 'signature': 'void | double', 'return_type': 'double'},
\     'gotExit': { 'signature': 'void | void', 'return_type': 'void'},
\     'gotStop': { 'signature': 'void | void', 'return_type': 'void'},
\     'loop': { 'signature': '[ int $flags] | bool', 'return_type': 'bool'},
\     'priorityInit': { 'signature': 'string $n_priorities | bool', 'return_type': 'bool'},
\     'reInit': { 'signature': 'string $base | void', 'return_type': 'void'},
\     'stop': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\   'static_methods': {
\   },
\},
\'eventbuffer': {
\   'name': 'EventBuffer',
\   'constants': {
\     'EOL_ANY': '0',
\     'EOL_CRLF': '1',
\     'EOL_CRLF_STRICT': '2',
\     'EOL_LF': '3',
\     'PTR_SET': '0',
\     'PTR_ADD': '1',
\   },
\   'properties': {
\     'length': { 'initializer': '', 'type': 'int'},
\     'contiguous_space': { 'initializer': '', 'type': 'int'},
\   },
\   'static_properties': {
\   },
\   'methods': {
\     'add': { 'signature': 'string $data | bool', 'return_type': 'bool'},
\     'addBuffer': { 'signature': 'EventBuffer $buf | bool', 'return_type': 'bool'},
\     'appendFrom': { 'signature': 'EventBuffer $buf, int $len | int', 'return_type': 'int'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'copyout': { 'signature': 'string &$data, int $max_bytes | int', 'return_type': 'int'},
\     'drain': { 'signature': 'int $len | void', 'return_type': 'void'},
\     'enableLocking': { 'signature': 'void | void', 'return_type': 'void'},
\     'expand': { 'signature': 'int $len | bool', 'return_type': 'bool'},
\     'freeze': { 'signature': 'bool $at_front | bool', 'return_type': 'bool'},
\     'lock': { 'signature': 'void | void', 'return_type': 'void'},
\     'prepend': { 'signature': 'string $data | bool', 'return_type': 'bool'},
\     'prependBuffer': { 'signature': 'EventBuffer $buf | bool', 'return_type': 'bool'},
\     'pullup': { 'signature': 'string $size | void', 'return_type': 'void'},
\     'read': { 'signature': 'mixed $fd, int $howmuch | string', 'return_type': 'string'},
\     'readLine': { 'signature': 'string $eol_style | void', 'return_type': 'void'},
\     'search': { 'signature': 'string $what [, int $start = -1 [, int $end = -1]] | mixed', 'return_type': 'mixed'},
\     'searchEol': { 'signature': '[ int $start = -1 [, int $eol_style = EventBuffer::EOL_ANY]] | mixed', 'return_type': 'mixed'},
\     'substr': { 'signature': 'int $start [, int $length] | string', 'return_type': 'string'},
\     'unfreeze': { 'signature': 'bool $at_front | bool', 'return_type': 'bool'},
\     'unlock': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'write': { 'signature': 'mixed $fd [, int $howmuch] | void', 'return_type': 'void'},
\   },
\   'static_methods': {
\   },
\},
\'eventbufferevent': {
\   'name': 'EventBufferEvent',
\   'constants': {
\     'READING': '1',
\     'WRITING': '2',
\     'EOF': '16',
\     'ERROR': '32',
\     'TIMEOUT': '64',
\     'CONNECTED': '128',
\     'OPT_CLOSE_ON_FREE': '1',
\     'OPT_THREADSAFE': '2',
\     'OPT_DEFER_CALLBACKS': '4',
\     'OPT_UNLOCK_CALLBACKS': '8',
\     'SSL_OPEN': '0',
\     'SSL_CONNECTING': '1',
\     'SSL_ACCEPTING': '2',
\   },
\   'properties': {
\     'fd': { 'initializer': '', 'type': 'integer'},
\     'priority': { 'initializer': '', 'type': 'integer'},
\     'input': { 'initializer': '', 'type': 'EventBuffer'},
\     'output': { 'initializer': '', 'type': 'EventBuffer'},
\   },
\   'static_properties': {
\   },
\   'methods': {
\     'connect': { 'signature': 'string $addr | bool', 'return_type': 'bool'},
\     'connectHost': { 'signature': 'EventDnsBase $dns_base, string $hostname, int $port [, int $family = EventUtil::AF_UNSPEC] | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': 'EventBase $base [, mixed $socket = NULL [, int $options = 0 [, callable $readcb = NULL [, callable $writecb = NULL [, callable $eventcb = NULL]]]]]', 'return_type': ''},
\     'createPair': { 'signature': 'EventBase $base [, int $options = 0] | array', 'return_type': 'array'},
\     'disable': { 'signature': 'int $events | bool', 'return_type': 'bool'},
\     'enable': { 'signature': 'string $events | bool', 'return_type': 'bool'},
\     'free': { 'signature': 'void | void', 'return_type': 'void'},
\     'getDnsErrorString': { 'signature': 'void | string', 'return_type': 'string'},
\     'getEnabled': { 'signature': 'void | int', 'return_type': 'int'},
\     'getInput': { 'signature': 'void | EventBuffer', 'return_type': 'EventBuffer'},
\     'getOutput': { 'signature': 'void | EventBuffer', 'return_type': 'EventBuffer'},
\     'read': { 'signature': 'string &$data, int $size | int', 'return_type': 'int'},
\     'readBuffer': { 'signature': 'EventBuffer $buf | bool', 'return_type': 'bool'},
\     'setCallbacks': { 'signature': 'callable $readcb, callable $writecb, callable $eventcb [, string $arg] | void', 'return_type': 'void'},
\     'setPriority': { 'signature': 'int $priority | bool', 'return_type': 'bool'},
\     'setTimeouts': { 'signature': 'int $timeout_read, int $timeout_write | bool', 'return_type': 'bool'},
\     'setWatermark': { 'signature': 'int $events, int $lowmark, int $highmark | void', 'return_type': 'void'},
\     'sslError': { 'signature': 'void | void', 'return_type': 'void'},
\     'sslRenegotiate': { 'signature': 'void | void', 'return_type': 'void'},
\     'write': { 'signature': 'string $data | bool', 'return_type': 'bool'},
\     'writeBuffer': { 'signature': 'EventBuffer $buf | bool', 'return_type': 'bool'},
\   },
\   'static_methods': {
\     'sslFilter': { 'signature': 'EventBase $base, EventBufferEvent $underlying, EventSslContext $ctx, int $state [, int $options = 0] | EventBufferEvent', 'return_type': 'EventBufferEvent'},
\     'sslSocket': { 'signature': 'EventBase $base, mixed $socket, EventSslContext $ctx, int $state [, int $options] | EventBufferEvent', 'return_type': 'EventBufferEvent'},
\   },
\},
\'eventconfig': {
\   'name': 'EventConfig',
\   'constants': {
\     'FEATURE_ET': '1',
\     'FEATURE_O1': '2',
\     'FEATURE_FDS': '4',
\   },
\   'properties': {
\   },
\   'static_properties': {
\   },
\   'methods': {
\     'avoidMethod': { 'signature': 'int $method | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'requireFeatures': { 'signature': 'int $feature | bool', 'return_type': 'bool'},
\     'setMaxDispatchInterval': { 'signature': 'int $max_interval, int $max_callbacks, int $min_priority | void', 'return_type': 'void'},
\   },
\   'static_methods': {
\   },
\},
\'eventdnsbase': {
\   'name': 'EventDnsBase',
\   'constants': {
\     'OPTION_SEARCH': '1',
\     'OPTION_NAMESERVERS': '2',
\     'OPTION_MISC': '4',
\     'OPTION_HOSTSFILE': '8',
\     'OPTIONS_ALL': '15',
\   },
\   'properties': {
\   },
\   'static_properties': {
\   },
\   'methods': {
\     'addNameserverIp': { 'signature': 'string $ip | bool', 'return_type': 'bool'},
\     'addSearch': { 'signature': 'string $domain | void', 'return_type': 'void'},
\     'clearSearch': { 'signature': 'void | void', 'return_type': 'void'},
\     '__construct': { 'signature': 'EventBase $base, bool $initialize', 'return_type': ''},
\     'countNameservers': { 'signature': 'void | void', 'return_type': 'void'},
\     'loadHosts': { 'signature': 'string $hosts | bool', 'return_type': 'bool'},
\     'parseResolvConf': { 'signature': 'int $flags, string $filename | bool', 'return_type': 'bool'},
\     'setOption': { 'signature': 'string $option, string $value | bool', 'return_type': 'bool'},
\     'setSearchNdots': { 'signature': 'int $ndots | bool', 'return_type': 'bool'},
\   },
\   'static_methods': {
\   },
\},
\'eventhttp': {
\   'name': 'EventHttp',
\   'constants': {
\   },
\   'properties': {
\   },
\   'static_properties': {
\   },
\   'methods': {
\     'accept': { 'signature': 'mixed $socket | bool', 'return_type': 'bool'},
\     'addServerAlias': { 'signature': 'string $alias | bool', 'return_type': 'bool'},
\     'bind': { 'signature': 'string $address, int $port | void', 'return_type': 'void'},
\     '__construct': { 'signature': 'EventBase $base', 'return_type': ''},
\     'removeServerAlias': { 'signature': 'string $alias | bool', 'return_type': 'bool'},
\     'setAllowedMethods': { 'signature': 'int $methods | void', 'return_type': 'void'},
\     'setCallback': { 'signature': 'string $path, string $cb [, string $arg] | void', 'return_type': 'void'},
\     'setDefaultCallback': { 'signature': 'string $cb [, string $arg] | void', 'return_type': 'void'},
\     'setMaxBodySize': { 'signature': 'int $value | void', 'return_type': 'void'},
\     'setMaxHeadersSize': { 'signature': 'int $value | void', 'return_type': 'void'},
\     'setTimeout': { 'signature': 'int $value | void', 'return_type': 'void'},
\   },
\   'static_methods': {
\   },
\},
\'eventhttpconnection': {
\   'name': 'EventHttpConnection',
\   'constants': {
\   },
\   'properties': {
\   },
\   'static_properties': {
\   },
\   'methods': {
\     '__construct': { 'signature': 'EventBase $base, EventDnsBase $dns_base, string $address, int $port', 'return_type': ''},
\     'getBase': { 'signature': 'void | EventBase', 'return_type': 'EventBase'},
\     'getPeer': { 'signature': 'string &$address, int &$port | void', 'return_type': 'void'},
\     'makeRequest': { 'signature': 'EventHttpRequest $req, int $type, string $uri | bool', 'return_type': 'bool'},
\     'setCloseCallback': { 'signature': 'callable $callback [, mixed $data] | void', 'return_type': 'void'},
\     'setLocalAddress': { 'signature': 'string $address | void', 'return_type': 'void'},
\     'setLocalPort': { 'signature': 'int $port | void', 'return_type': 'void'},
\     'setMaxBodySize': { 'signature': 'string $max_size | void', 'return_type': 'void'},
\     'setMaxHeadersSize': { 'signature': 'string $max_size | void', 'return_type': 'void'},
\     'setRetries': { 'signature': 'int $retries | void', 'return_type': 'void'},
\     'setTimeout': { 'signature': 'int $timeout | void', 'return_type': 'void'},
\   },
\   'static_methods': {
\   },
\},
\'eventhttprequest': {
\   'name': 'EventHttpRequest',
\   'constants': {
\     'CMD_GET': '1',
\     'CMD_POST': '2',
\     'CMD_HEAD': '4',
\     'CMD_PUT': '8',
\     'CMD_DELETE': '16',
\     'CMD_OPTIONS': '32',
\     'CMD_TRACE': '64',
\     'CMD_CONNECT': '128',
\     'CMD_PATCH': '256',
\     'INPUT_HEADER': '1',
\     'OUTPUT_HEADER': '2',
\   },
\   'properties': {
\   },
\   'static_properties': {
\   },
\   'methods': {
\     'addHeader': { 'signature': 'string $key, string $value, int $type | bool', 'return_type': 'bool'},
\     'cancel': { 'signature': 'void | void', 'return_type': 'void'},
\     'clearHeaders': { 'signature': 'void | void', 'return_type': 'void'},
\     'closeConnection': { 'signature': 'void | EventHttpConnection', 'return_type': 'EventHttpConnection'},
\     '__construct': { 'signature': 'callable $callback [, mixed $data = NULL]', 'return_type': ''},
\     'findHeader': { 'signature': 'string $key, string $type | void', 'return_type': 'void'},
\     'free': { 'signature': 'void | void', 'return_type': 'void'},
\     'getCommand': { 'signature': 'void | void', 'return_type': 'void'},
\     'getHost': { 'signature': 'void | string', 'return_type': 'string'},
\     'getInputBuffer': { 'signature': 'void | EventBuffer', 'return_type': 'EventBuffer'},
\     'getInputHeaders': { 'signature': 'void | array', 'return_type': 'array'},
\     'getOutputBuffer': { 'signature': 'void | EventBuffer', 'return_type': 'EventBuffer'},
\     'getOutputHeaders': { 'signature': 'void | void', 'return_type': 'void'},
\     'getResponseCode': { 'signature': 'void | int', 'return_type': 'int'},
\     'getUri': { 'signature': 'void | string', 'return_type': 'string'},
\     'removeHeader': { 'signature': 'string $key, string $type | void', 'return_type': 'void'},
\     'sendError': { 'signature': 'int $error [, string $reason = NULL] | void', 'return_type': 'void'},
\     'sendReply': { 'signature': 'int $code, string $reason [, EventBuffer $buf] | void', 'return_type': 'void'},
\     'sendReplyChunk': { 'signature': 'EventBuffer $buf | void', 'return_type': 'void'},
\     'sendReplyEnd': { 'signature': 'void | void', 'return_type': 'void'},
\     'sendReplyStart': { 'signature': 'int $code, string $reason | void', 'return_type': 'void'},
\   },
\   'static_methods': {
\   },
\},
\'eventlistener': {
\   'name': 'EventListener',
\   'constants': {
\     'OPT_LEAVE_SOCKETS_BLOCKING': '1',
\     'OPT_CLOSE_ON_FREE': '2',
\     'OPT_CLOSE_ON_EXEC': '4',
\     'OPT_REUSEABLE': '8',
\     'OPT_THREADSAFE': '16',
\   },
\   'properties': {
\     'fd': { 'initializer': '', 'type': 'int'},
\   },
\   'static_properties': {
\   },
\   'methods': {
\     '__construct': { 'signature': 'EventBase $base, callable $cb, mixed $data, int $flags, int $backlog, mixed $target', 'return_type': ''},
\     'disable': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'enable': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getBase': { 'signature': 'void | void', 'return_type': 'void'},
\     'setCallback': { 'signature': 'callable $cb [, mixed $arg = NULL] | void', 'return_type': 'void'},
\     'setErrorCallback': { 'signature': 'string $cb | void', 'return_type': 'void'},
\   },
\   'static_methods': {
\     'getSocketName': { 'signature': 'string &$address [, mixed &$port] | bool', 'return_type': 'bool'},
\   },
\},
\'eventsslcontext': {
\   'name': 'EventSslContext',
\   'constants': {
\     'SSLv2_CLIENT_METHOD': '1',
\     'SSLv3_CLIENT_METHOD': '2',
\     'SSLv23_CLIENT_METHOD': '3',
\     'TLS_CLIENT_METHOD': '4',
\     'SSLv2_SERVER_METHOD': '5',
\     'SSLv3_SERVER_METHOD': '6',
\     'SSLv23_SERVER_METHOD': '7',
\     'TLS_SERVER_METHOD': '8',
\     'OPT_LOCAL_CERT': '1',
\     'OPT_LOCAL_PK': '2',
\     'OPT_PASSPHRASE': '3',
\     'OPT_CA_FILE': '4',
\     'OPT_CA_PATH': '5',
\     'OPT_ALLOW_SELF_SIGNED': '6',
\     'OPT_VERIFY_PEER': '7',
\     'OPT_VERIFY_DEPTH': '8',
\     'OPT_CIPHERS': '9',
\   },
\   'properties': {
\     'local_cert': { 'initializer': '', 'type': 'string'},
\     'local_pk': { 'initializer': '', 'type': 'string'},
\   },
\   'static_properties': {
\   },
\   'methods': {
\     '__construct': { 'signature': 'string $method, string $options', 'return_type': ''},
\   },
\   'static_methods': {
\   },
\},
\'eventutil': {
\   'name': 'EventUtil',
\   'constants': {
\     'AF_INET': '2',
\     'AF_INET6': '10',
\     'AF_UNSPEC': '0',
\     'LIBEVENT_VERSION_NUMBER': '33559808',
\     'SO_DEBUG': '1',
\     'SO_REUSEADDR': '2',
\     'SO_KEEPALIVE': '9',
\     'SO_DONTROUTE': '5',
\     'SO_LINGER': '13',
\     'SO_BROADCAST': '6',
\     'SO_OOBINLINE': '10',
\     'SO_SNDBUF': '7',
\     'SO_RCVBUF': '8',
\     'SO_SNDLOWAT': '19',
\     'SO_RCVLOWAT': '18',
\     'SO_SNDTIMEO': '21',
\     'SO_RCVTIMEO': '20',
\     'SO_TYPE': '3',
\     'SO_ERROR': '4',
\     'SOL_SOCKET': '1',
\     'SOL_TCP': '6',
\     'SOL_UDP': '17',
\     'IPPROTO_IP': '0',
\     'IPPROTO_IPV6': '41',
\   },
\   'properties': {
\   },
\   'static_properties': {
\   },
\   'methods': {
\     '__construct': { 'signature': 'void', 'return_type': ''},
\   },
\   'static_methods': {
\     'getLastSocketErrno': { 'signature': '[ mixed $socket = NULL] | int', 'return_type': 'int'},
\     'getLastSocketError': { 'signature': '[ mixed $socket] | string', 'return_type': 'string'},
\     'getSocketFd': { 'signature': 'mixed $socket | int', 'return_type': 'int'},
\     'getSocketName': { 'signature': 'mixed $socket, string &$address [, mixed &$port] | bool', 'return_type': 'bool'},
\     'setSocketOption': { 'signature': 'mixed $socket, int $level, int $optname, mixed $optval | bool', 'return_type': 'bool'},
\     'sslRandPoll': { 'signature': 'void | void', 'return_type': 'void'},
\   },
\},
\})
