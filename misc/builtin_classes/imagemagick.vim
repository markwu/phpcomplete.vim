call extend(g:php_builtin_classes, {
\'imagick': {
\   'name': 'Imagick',
\   'constants': {
\   },
\   'properties': {
\   },
\   'static_properties': {
\   },
\   'methods': {
\     'adaptiveBlurImage': { 'signature': 'float $radius, float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'adaptiveResizeImage': { 'signature': 'int $columns, int $rows [, bool $bestfit = false] | bool', 'return_type': 'bool'},
\     'adaptiveSharpenImage': { 'signature': 'float $radius, float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'adaptiveThresholdImage': { 'signature': 'int $width, int $height, int $offset | bool', 'return_type': 'bool'},
\     'addImage': { 'signature': 'Imagick $source | bool', 'return_type': 'bool'},
\     'addNoiseImage': { 'signature': 'int $noise_type [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'affineTransformImage': { 'signature': 'ImagickDraw $matrix | bool', 'return_type': 'bool'},
\     'animateImages': { 'signature': 'string $x_server | bool', 'return_type': 'bool'},
\     'annotateImage': { 'signature': 'ImagickDraw $draw_settings, float $x, float $y, float $angle, string $text | bool', 'return_type': 'bool'},
\     'appendImages': { 'signature': '[ bool $stack = false] | Imagick', 'return_type': 'Imagick'},
\     'averageImages': { 'signature': 'void | Imagick', 'return_type': 'Imagick'},
\     'blackThresholdImage': { 'signature': 'mixed $threshold | bool', 'return_type': 'bool'},
\     'blurImage': { 'signature': 'float $radius, float $sigma [, int $channel] | bool', 'return_type': 'bool'},
\     'borderImage': { 'signature': 'mixed $bordercolor, int $width, int $height | bool', 'return_type': 'bool'},
\     'charcoalImage': { 'signature': 'float $radius, float $sigma | bool', 'return_type': 'bool'},
\     'chopImage': { 'signature': 'int $width, int $height, int $x, int $y | bool', 'return_type': 'bool'},
\     'clear': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'clipImage': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'clipPathImage': { 'signature': 'string $pathname, bool $inside | bool', 'return_type': 'bool'},
\     'clone': { 'signature': 'void | Imagick', 'return_type': 'Imagick'},
\     'clutImage': { 'signature': 'Imagick $lookup_table [, float $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'coalesceImages': { 'signature': 'void | Imagick', 'return_type': 'Imagick'},
\     'colorFloodfillImage': { 'signature': 'mixed $fill, float $fuzz, mixed $bordercolor, int $x, int $y | bool', 'return_type': 'bool'},
\     'colorizeImage': { 'signature': 'mixed $colorize, mixed $opacity | bool', 'return_type': 'bool'},
\     'combineImages': { 'signature': 'int $channelType | Imagick', 'return_type': 'Imagick'},
\     'commentImage': { 'signature': 'string $comment | bool', 'return_type': 'bool'},
\     'compareImageChannels': { 'signature': 'Imagick $image, int $channelType, int $metricType | array', 'return_type': 'array'},
\     'compareImageLayers': { 'signature': 'int $method | Imagick', 'return_type': 'Imagick'},
\     'compareImages': { 'signature': 'Imagick $compare, int $metric | array', 'return_type': 'array'},
\     'compositeImage': { 'signature': 'Imagick $composite_object, int $composite, int $x, int $y [, int $channel = Imagick::CHANNEL_ALL] | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': 'mixed $files', 'return_type': ''},
\     'contrastImage': { 'signature': 'bool $sharpen | bool', 'return_type': 'bool'},
\     'contrastStretchImage': { 'signature': 'float $black_point, float $white_point [, int $channel = Imagick::CHANNEL_ALL] | bool', 'return_type': 'bool'},
\     'convolveImage': { 'signature': 'array $kernel [, int $channel = Imagick::CHANNEL_ALL] | bool', 'return_type': 'bool'},
\     'cropImage': { 'signature': 'int $width, int $height, int $x, int $y | bool', 'return_type': 'bool'},
\     'cropThumbnailImage': { 'signature': 'int $width, int $height | bool', 'return_type': 'bool'},
\     'current': { 'signature': 'void | Imagick', 'return_type': 'Imagick'},
\     'cycleColormapImage': { 'signature': 'int $displace | bool', 'return_type': 'bool'},
\     'decipherImage': { 'signature': 'string $passphrase | bool', 'return_type': 'bool'},
\     'deconstructImages': { 'signature': 'void | Imagick', 'return_type': 'Imagick'},
\     'deleteImageArtifact': { 'signature': 'string $artifact | bool', 'return_type': 'bool'},
\     'deskewImage': { 'signature': 'float $threshold | bool', 'return_type': 'bool'},
\     'despeckleImage': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'destroy': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'displayImage': { 'signature': 'string $servername | bool', 'return_type': 'bool'},
\     'displayImages': { 'signature': 'string $servername | bool', 'return_type': 'bool'},
\     'distortImage': { 'signature': 'int $method, array $arguments, bool $bestfit | bool', 'return_type': 'bool'},
\     'drawImage': { 'signature': 'ImagickDraw $draw | bool', 'return_type': 'bool'},
\     'edgeImage': { 'signature': 'float $radius | bool', 'return_type': 'bool'},
\     'embossImage': { 'signature': 'float $radius, float $sigma | bool', 'return_type': 'bool'},
\     'encipherImage': { 'signature': 'string $passphrase | bool', 'return_type': 'bool'},
\     'enhanceImage': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'equalizeImage': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'evaluateImage': { 'signature': 'int $op, float $constant [, int $channel = Imagick::CHANNEL_ALL] | bool', 'return_type': 'bool'},
\     'exportImagePixels': { 'signature': 'int $x, int $y, int $width, int $height, string $map, int $STORAGE | array', 'return_type': 'array'},
\     'extentImage': { 'signature': 'int $width, int $height, int $x, int $y | bool', 'return_type': 'bool'},
\     'flattenImages': { 'signature': 'void | Imagick', 'return_type': 'Imagick'},
\     'flipImage': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'floodFillPaintImage': { 'signature': 'mixed $fill, float $fuzz, mixed $target, int $x, int $y, bool $invert [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'flopImage': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'frameImage': { 'signature': 'mixed $matte_color, int $width, int $height, int $inner_bevel, int $outer_bevel | bool', 'return_type': 'bool'},
\     'functionImage': { 'signature': 'int $function, array $arguments [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'fxImage': { 'signature': 'string $expression [, int $channel = Imagick::CHANNEL_ALL] | Imagick', 'return_type': 'Imagick'},
\     'gammaImage': { 'signature': 'float $gamma [, int $channel = Imagick::CHANNEL_ALL] | bool', 'return_type': 'bool'},
\     'gaussianBlurImage': { 'signature': 'float $radius, float $sigma [, int $channel = Imagick::CHANNEL_ALL] | bool', 'return_type': 'bool'},
\     'getColorspace': { 'signature': 'void | int', 'return_type': 'int'},
\     'getCompression': { 'signature': 'void | int', 'return_type': 'int'},
\     'getCompressionQuality': { 'signature': 'void | int', 'return_type': 'int'},
\     'getCopyright': { 'signature': 'void | string', 'return_type': 'string'},
\     'getFilename': { 'signature': 'void | string', 'return_type': 'string'},
\     'getFont': { 'signature': 'void | string', 'return_type': 'string'},
\     'getFormat': { 'signature': 'void | string', 'return_type': 'string'},
\     'getGravity': { 'signature': 'void | int', 'return_type': 'int'},
\     'getHomeURL': { 'signature': 'void | string', 'return_type': 'string'},
\     'getImage': { 'signature': 'void | Imagick', 'return_type': 'Imagick'},
\     'getImageAlphaChannel': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageArtifact': { 'signature': 'string $artifact | string', 'return_type': 'string'},
\     'getImageBackgroundColor': { 'signature': 'void | ImagickPixel', 'return_type': 'ImagickPixel'},
\     'getImageBlob': { 'signature': 'void | string', 'return_type': 'string'},
\     'getImageBluePrimary': { 'signature': 'void | array', 'return_type': 'array'},
\     'getImageBorderColor': { 'signature': 'void | ImagickPixel', 'return_type': 'ImagickPixel'},
\     'getImageChannelDepth': { 'signature': 'int $channel | int', 'return_type': 'int'},
\     'getImageChannelDistortion': { 'signature': 'Imagick $reference, int $channel, int $metric | float', 'return_type': 'float'},
\     'getImageChannelDistortions': { 'signature': 'Imagick $reference, int $metric [, int $channel = Imagick::CHANNEL_DEFAULT] | float', 'return_type': 'float'},
\     'getImageChannelExtrema': { 'signature': 'int $channel | array', 'return_type': 'array'},
\     'getImageChannelKurtosis': { 'signature': '[ int $channel = Imagick::CHANNEL_DEFAULT] | array', 'return_type': 'array'},
\     'getImageChannelMean': { 'signature': 'int $channel | array', 'return_type': 'array'},
\     'getImageChannelRange': { 'signature': 'int $channel | array', 'return_type': 'array'},
\     'getImageChannelStatistics': { 'signature': 'void | array', 'return_type': 'array'},
\     'getImageClipMask': { 'signature': 'void | Imagick', 'return_type': 'Imagick'},
\     'getImageColormapColor': { 'signature': 'int $index | ImagickPixel', 'return_type': 'ImagickPixel'},
\     'getImageColors': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageColorspace': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageCompose': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageCompression': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageDelay': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageDepth': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageDispose': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageDistortion': { 'signature': 'MagickWand $reference, int $metric | float', 'return_type': 'float'},
\     'getImageExtrema': { 'signature': 'void | array', 'return_type': 'array'},
\     'getImageFilename': { 'signature': 'void | string', 'return_type': 'string'},
\     'getImageFormat': { 'signature': 'void | string', 'return_type': 'string'},
\     'getImageGamma': { 'signature': 'void | float', 'return_type': 'float'},
\     'getImageGeometry': { 'signature': 'void | array', 'return_type': 'array'},
\     'getImageGravity': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageGreenPrimary': { 'signature': 'void | array', 'return_type': 'array'},
\     'getImageHeight': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageHistogram': { 'signature': 'void | array', 'return_type': 'array'},
\     'getImageIndex': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageInterlaceScheme': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageInterpolateMethod': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageIterations': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageLength': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageMagickLicense': { 'signature': 'void | string', 'return_type': 'string'},
\     'getImageMatte': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getImageMatteColor': { 'signature': 'void | ImagickPixel', 'return_type': 'ImagickPixel'},
\     'getImageOrientation': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImagePage': { 'signature': 'void | array', 'return_type': 'array'},
\     'getImagePixelColor': { 'signature': 'int $x, int $y | ImagickPixel', 'return_type': 'ImagickPixel'},
\     'getImageProfile': { 'signature': 'string $name | string', 'return_type': 'string'},
\     'getImageProfiles': { 'signature': '[ string $pattern = "*" [, bool $only_names = true]] | array', 'return_type': 'array'},
\     'getImageProperties': { 'signature': '[ string $pattern = "*" [, bool $only_names = true]] | array', 'return_type': 'array'},
\     'getImageProperty': { 'signature': 'string $name | string', 'return_type': 'string'},
\     'getImageRedPrimary': { 'signature': 'void | array', 'return_type': 'array'},
\     'getImageRegion': { 'signature': 'int $width, int $height, int $x, int $y | Imagick', 'return_type': 'Imagick'},
\     'getImageRenderingIntent': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageResolution': { 'signature': 'void | array', 'return_type': 'array'},
\     'getImagesBlob': { 'signature': 'void | string', 'return_type': 'string'},
\     'getImageScene': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageSignature': { 'signature': 'void | string', 'return_type': 'string'},
\     'getImageSize': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageTicksPerSecond': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageTotalInkDensity': { 'signature': 'void | float', 'return_type': 'float'},
\     'getImageType': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageUnits': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageVirtualPixelMethod': { 'signature': 'void | int', 'return_type': 'int'},
\     'getImageWhitePoint': { 'signature': 'void | array', 'return_type': 'array'},
\     'getImageWidth': { 'signature': 'void | int', 'return_type': 'int'},
\     'getInterlaceScheme': { 'signature': 'void | int', 'return_type': 'int'},
\     'getIteratorIndex': { 'signature': 'void | int', 'return_type': 'int'},
\     'getNumberImages': { 'signature': 'void | int', 'return_type': 'int'},
\     'getOption': { 'signature': 'string $key | string', 'return_type': 'string'},
\     'getPackageName': { 'signature': 'void | string', 'return_type': 'string'},
\     'getPage': { 'signature': 'void | array', 'return_type': 'array'},
\     'getPixelIterator': { 'signature': 'void | ImagickPixelIterator', 'return_type': 'ImagickPixelIterator'},
\     'getPixelRegionIterator': { 'signature': 'int $x, int $y, int $columns, int $rows | ImagickPixelIterator', 'return_type': 'ImagickPixelIterator'},
\     'getPointSize': { 'signature': 'void | float', 'return_type': 'float'},
\     'getQuantumDepth': { 'signature': 'void | array', 'return_type': 'array'},
\     'getQuantumRange': { 'signature': 'void | array', 'return_type': 'array'},
\     'getReleaseDate': { 'signature': 'void | string', 'return_type': 'string'},
\     'getResource': { 'signature': 'int $type | int', 'return_type': 'int'},
\     'getResourceLimit': { 'signature': 'int $type | int', 'return_type': 'int'},
\     'getSamplingFactors': { 'signature': 'void | array', 'return_type': 'array'},
\     'getSize': { 'signature': 'void | array', 'return_type': 'array'},
\     'getSizeOffset': { 'signature': 'void | int', 'return_type': 'int'},
\     'getVersion': { 'signature': 'void | array', 'return_type': 'array'},
\     'haldClutImage': { 'signature': 'Imagick $clut [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'hasNextImage': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'hasPreviousImage': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'identifyImage': { 'signature': '[ bool $appendRawOutput = false] | array', 'return_type': 'array'},
\     'implodeImage': { 'signature': 'float $radius | bool', 'return_type': 'bool'},
\     'importImagePixels': { 'signature': 'int $x, int $y, int $width, int $height, string $map, int $storage, array $pixels | bool', 'return_type': 'bool'},
\     'labelImage': { 'signature': 'string $label | bool', 'return_type': 'bool'},
\     'levelImage': { 'signature': 'float $blackPoint, float $gamma, float $whitePoint [, int $channel = Imagick::CHANNEL_ALL] | bool', 'return_type': 'bool'},
\     'linearStretchImage': { 'signature': 'float $blackPoint, float $whitePoint | bool', 'return_type': 'bool'},
\     'liquidRescaleImage': { 'signature': 'int $width, int $height, float $delta_x, float $rigidity | bool', 'return_type': 'bool'},
\     'magnifyImage': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'mapImage': { 'signature': 'Imagick $map, bool $dither | bool', 'return_type': 'bool'},
\     'matteFloodfillImage': { 'signature': 'float $alpha, float $fuzz, mixed $bordercolor, int $x, int $y | bool', 'return_type': 'bool'},
\     'medianFilterImage': { 'signature': 'float $radius | bool', 'return_type': 'bool'},
\     'mergeImageLayers': { 'signature': 'int $layer_method | bool', 'return_type': 'bool'},
\     'minifyImage': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'modulateImage': { 'signature': 'float $brightness, float $saturation, float $hue | bool', 'return_type': 'bool'},
\     'montageImage': { 'signature': 'ImagickDraw $draw, string $tile_geometry, string $thumbnail_geometry, int $mode, string $frame | Imagick', 'return_type': 'Imagick'},
\     'morphImages': { 'signature': 'int $number_frames | Imagick', 'return_type': 'Imagick'},
\     'mosaicImages': { 'signature': 'void | Imagick', 'return_type': 'Imagick'},
\     'motionBlurImage': { 'signature': 'float $radius, float $sigma, float $angle [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'negateImage': { 'signature': 'bool $gray [, int $channel = Imagick::CHANNEL_ALL] | bool', 'return_type': 'bool'},
\     'newImage': { 'signature': 'int $cols, int $rows, mixed $background [, string $format] | bool', 'return_type': 'bool'},
\     'newPseudoImage': { 'signature': 'int $columns, int $rows, string $pseudoString | bool', 'return_type': 'bool'},
\     'nextImage': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'normalizeImage': { 'signature': '[ int $channel = Imagick::CHANNEL_ALL] | bool', 'return_type': 'bool'},
\     'oilPaintImage': { 'signature': 'float $radius | bool', 'return_type': 'bool'},
\     'opaquePaintImage': { 'signature': 'mixed $target, mixed $fill, float $fuzz, bool $invert [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'optimizeImageLayers': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'orderedPosterizeImage': { 'signature': 'string $threshold_map [, int $channel = Imagick::CHANNEL_ALL] | bool', 'return_type': 'bool'},
\     'paintFloodfillImage': { 'signature': 'mixed $fill, float $fuzz, mixed $bordercolor, int $x, int $y [, int $channel = Imagick::CHANNEL_ALL] | bool', 'return_type': 'bool'},
\     'paintOpaqueImage': { 'signature': 'mixed $target, mixed $fill, float $fuzz [, int $channel = Imagick::CHANNEL_ALL] | bool', 'return_type': 'bool'},
\     'paintTransparentImage': { 'signature': 'mixed $target, float $alpha, float $fuzz | bool', 'return_type': 'bool'},
\     'pingImage': { 'signature': 'string $filename | bool', 'return_type': 'bool'},
\     'pingImageBlob': { 'signature': 'string $image | bool', 'return_type': 'bool'},
\     'pingImageFile': { 'signature': 'resource $filehandle [, string $fileName] | bool', 'return_type': 'bool'},
\     'polaroidImage': { 'signature': 'ImagickDraw $properties, float $angle | bool', 'return_type': 'bool'},
\     'posterizeImage': { 'signature': 'int $levels, bool $dither | bool', 'return_type': 'bool'},
\     'previewImages': { 'signature': 'int $preview | bool', 'return_type': 'bool'},
\     'previousImage': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'profileImage': { 'signature': 'string $name, string $profile | bool', 'return_type': 'bool'},
\     'quantizeImage': { 'signature': 'int $numberColors, int $colorspace, int $treedepth, bool $dither, bool $measureError | bool', 'return_type': 'bool'},
\     'quantizeImages': { 'signature': 'int $numberColors, int $colorspace, int $treedepth, bool $dither, bool $measureError | bool', 'return_type': 'bool'},
\     'queryFontMetrics': { 'signature': 'ImagickDraw $properties, string $text [, bool $multiline] | array', 'return_type': 'array'},
\     'queryFonts': { 'signature': '[ string $pattern = "*"] | array', 'return_type': 'array'},
\     'queryFormats': { 'signature': '[ string $pattern = "*"] | array', 'return_type': 'array'},
\     'radialBlurImage': { 'signature': 'float $angle [, int $channel = Imagick::CHANNEL_ALL] | bool', 'return_type': 'bool'},
\     'raiseImage': { 'signature': 'int $width, int $height, int $x, int $y, bool $raise | bool', 'return_type': 'bool'},
\     'randomThresholdImage': { 'signature': 'float $low, float $high [, int $channel = Imagick::CHANNEL_ALL] | bool', 'return_type': 'bool'},
\     'readImage': { 'signature': 'string $filename | bool', 'return_type': 'bool'},
\     'readImageBlob': { 'signature': 'string $image [, string $filename] | bool', 'return_type': 'bool'},
\     'readImageFile': { 'signature': 'resource $filehandle [, string $fileName = null] | bool', 'return_type': 'bool'},
\     'recolorImage': { 'signature': 'array $matrix | bool', 'return_type': 'bool'},
\     'reduceNoiseImage': { 'signature': 'float $radius | bool', 'return_type': 'bool'},
\     'remapImage': { 'signature': 'Imagick $replacement, int $DITHER | bool', 'return_type': 'bool'},
\     'removeImage': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'removeImageProfile': { 'signature': 'string $name | string', 'return_type': 'string'},
\     'render': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'resampleImage': { 'signature': 'float $x_resolution, float $y_resolution, int $filter, float $blur | bool', 'return_type': 'bool'},
\     'resetImagePage': { 'signature': 'string $page | bool', 'return_type': 'bool'},
\     'resizeImage': { 'signature': 'int $columns, int $rows, int $filter, float $blur [, bool $bestfit = false] | bool', 'return_type': 'bool'},
\     'rollImage': { 'signature': 'int $x, int $y | bool', 'return_type': 'bool'},
\     'rotateImage': { 'signature': 'mixed $background, float $degrees | bool', 'return_type': 'bool'},
\     'roundCorners': { 'signature': 'float $x_rounding, float $y_rounding [, float $stroke_width = 10 [, float $displace = 5 [, float $size_correction = -6]]] | bool', 'return_type': 'bool'},
\     'sampleImage': { 'signature': 'int $columns, int $rows | bool', 'return_type': 'bool'},
\     'scaleImage': { 'signature': 'int $cols, int $rows [, bool $bestfit = false] | bool', 'return_type': 'bool'},
\     'segmentImage': { 'signature': 'int $COLORSPACE, float $cluster_threshold, float $smooth_threshold [, bool $verbose = false] | bool', 'return_type': 'bool'},
\     'separateImageChannel': { 'signature': 'int $channel | bool', 'return_type': 'bool'},
\     'sepiaToneImage': { 'signature': 'float $threshold | bool', 'return_type': 'bool'},
\     'setBackgroundColor': { 'signature': 'mixed $background | bool', 'return_type': 'bool'},
\     'setColorspace': { 'signature': 'int $COLORSPACE | bool', 'return_type': 'bool'},
\     'setCompression': { 'signature': 'int $compression | bool', 'return_type': 'bool'},
\     'setCompressionQuality': { 'signature': 'int $quality | bool', 'return_type': 'bool'},
\     'setFilename': { 'signature': 'string $filename | bool', 'return_type': 'bool'},
\     'setFirstIterator': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'setFont': { 'signature': 'string $font | bool', 'return_type': 'bool'},
\     'setFormat': { 'signature': 'string $format | bool', 'return_type': 'bool'},
\     'setGravity': { 'signature': 'int $gravity | bool', 'return_type': 'bool'},
\     'setImage': { 'signature': 'Imagick $replace | bool', 'return_type': 'bool'},
\     'setImageAlphaChannel': { 'signature': 'int $mode | bool', 'return_type': 'bool'},
\     'setImageArtifact': { 'signature': 'string $artifact, string $value | bool', 'return_type': 'bool'},
\     'setImageBackgroundColor': { 'signature': 'mixed $background | bool', 'return_type': 'bool'},
\     'setImageBias': { 'signature': 'float $bias | bool', 'return_type': 'bool'},
\     'setImageBluePrimary': { 'signature': 'float $x, float $y | bool', 'return_type': 'bool'},
\     'setImageBorderColor': { 'signature': 'mixed $border | bool', 'return_type': 'bool'},
\     'setImageChannelDepth': { 'signature': 'int $channel, int $depth | bool', 'return_type': 'bool'},
\     'setImageClipMask': { 'signature': 'Imagick $clip_mask | bool', 'return_type': 'bool'},
\     'setImageColormapColor': { 'signature': 'int $index, ImagickPixel $color | bool', 'return_type': 'bool'},
\     'setImageColorspace': { 'signature': 'int $colorspace | bool', 'return_type': 'bool'},
\     'setImageCompose': { 'signature': 'int $compose | bool', 'return_type': 'bool'},
\     'setImageCompression': { 'signature': 'int $compression | bool', 'return_type': 'bool'},
\     'setImageCompressionQuality': { 'signature': 'int $quality | bool', 'return_type': 'bool'},
\     'setImageDelay': { 'signature': 'int $delay | bool', 'return_type': 'bool'},
\     'setImageDepth': { 'signature': 'int $depth | bool', 'return_type': 'bool'},
\     'setImageDispose': { 'signature': 'int $dispose | bool', 'return_type': 'bool'},
\     'setImageExtent': { 'signature': 'int $columns, int $rows | bool', 'return_type': 'bool'},
\     'setImageFilename': { 'signature': 'string $filename | bool', 'return_type': 'bool'},
\     'setImageFormat': { 'signature': 'string $format | bool', 'return_type': 'bool'},
\     'setImageGamma': { 'signature': 'float $gamma | bool', 'return_type': 'bool'},
\     'setImageGravity': { 'signature': 'int $gravity | bool', 'return_type': 'bool'},
\     'setImageGreenPrimary': { 'signature': 'float $x, float $y | bool', 'return_type': 'bool'},
\     'setImageIndex': { 'signature': 'int $index | bool', 'return_type': 'bool'},
\     'setImageInterlaceScheme': { 'signature': 'int $interlace_scheme | bool', 'return_type': 'bool'},
\     'setImageInterpolateMethod': { 'signature': 'int $method | bool', 'return_type': 'bool'},
\     'setImageIterations': { 'signature': 'int $iterations | bool', 'return_type': 'bool'},
\     'setImageMatte': { 'signature': 'bool $matte | bool', 'return_type': 'bool'},
\     'setImageMatteColor': { 'signature': 'mixed $matte | bool', 'return_type': 'bool'},
\     'setImageOpacity': { 'signature': 'float $opacity | bool', 'return_type': 'bool'},
\     'setImageOrientation': { 'signature': 'int $orientation | bool', 'return_type': 'bool'},
\     'setImagePage': { 'signature': 'int $width, int $height, int $x, int $y | bool', 'return_type': 'bool'},
\     'setImageProfile': { 'signature': 'string $name, string $profile | bool', 'return_type': 'bool'},
\     'setImageProperty': { 'signature': 'string $name, string $value | bool', 'return_type': 'bool'},
\     'setImageRedPrimary': { 'signature': 'float $x, float $y | bool', 'return_type': 'bool'},
\     'setImageRenderingIntent': { 'signature': 'int $rendering_intent | bool', 'return_type': 'bool'},
\     'setImageResolution': { 'signature': 'float $x_resolution, float $y_resolution | bool', 'return_type': 'bool'},
\     'setImageScene': { 'signature': 'int $scene | bool', 'return_type': 'bool'},
\     'setImageTicksPerSecond': { 'signature': 'int $ticks_per_second | bool', 'return_type': 'bool'},
\     'setImageType': { 'signature': 'int $image_type | bool', 'return_type': 'bool'},
\     'setImageUnits': { 'signature': 'int $units | bool', 'return_type': 'bool'},
\     'setImageVirtualPixelMethod': { 'signature': 'int $method | bool', 'return_type': 'bool'},
\     'setImageWhitePoint': { 'signature': 'float $x, float $y | bool', 'return_type': 'bool'},
\     'setInterlaceScheme': { 'signature': 'int $interlace_scheme | bool', 'return_type': 'bool'},
\     'setIteratorIndex': { 'signature': 'int $index | bool', 'return_type': 'bool'},
\     'setLastIterator': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'setOption': { 'signature': 'string $key, string $value | bool', 'return_type': 'bool'},
\     'setPage': { 'signature': 'int $width, int $height, int $x, int $y | bool', 'return_type': 'bool'},
\     'setPointSize': { 'signature': 'float $point_size | bool', 'return_type': 'bool'},
\     'setResolution': { 'signature': 'float $x_resolution, float $y_resolution | bool', 'return_type': 'bool'},
\     'setResourceLimit': { 'signature': 'int $type, int $limit | bool', 'return_type': 'bool'},
\     'setSamplingFactors': { 'signature': 'array $factors | bool', 'return_type': 'bool'},
\     'setSize': { 'signature': 'int $columns, int $rows | bool', 'return_type': 'bool'},
\     'setSizeOffset': { 'signature': 'int $columns, int $rows, int $offset | bool', 'return_type': 'bool'},
\     'setType': { 'signature': 'int $image_type | bool', 'return_type': 'bool'},
\     'shadeImage': { 'signature': 'bool $gray, float $azimuth, float $elevation | bool', 'return_type': 'bool'},
\     'shadowImage': { 'signature': 'float $opacity, float $sigma, int $x, int $y | bool', 'return_type': 'bool'},
\     'sharpenImage': { 'signature': 'float $radius, float $sigma [, int $channel = Imagick::CHANNEL_ALL] | bool', 'return_type': 'bool'},
\     'shaveImage': { 'signature': 'int $columns, int $rows | bool', 'return_type': 'bool'},
\     'shearImage': { 'signature': 'mixed $background, float $x_shear, float $y_shear | bool', 'return_type': 'bool'},
\     'sigmoidalContrastImage': { 'signature': 'bool $sharpen, float $alpha, float $beta [, int $channel = Imagick::CHANNEL_ALL] | bool', 'return_type': 'bool'},
\     'sketchImage': { 'signature': 'float $radius, float $sigma, float $angle | bool', 'return_type': 'bool'},
\     'solarizeImage': { 'signature': 'int $threshold | bool', 'return_type': 'bool'},
\     'sparseColorImage': { 'signature': 'int $SPARSE_METHOD, array $arguments [, int $channel = Imagick::CHANNEL_DEFAULT] | bool', 'return_type': 'bool'},
\     'spliceImage': { 'signature': 'int $width, int $height, int $x, int $y | bool', 'return_type': 'bool'},
\     'spreadImage': { 'signature': 'float $radius | bool', 'return_type': 'bool'},
\     'steganoImage': { 'signature': 'Imagick $watermark_wand, int $offset | Imagick', 'return_type': 'Imagick'},
\     'stereoImage': { 'signature': 'Imagick $offset_wand | bool', 'return_type': 'bool'},
\     'stripImage': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'swirlImage': { 'signature': 'float $degrees | bool', 'return_type': 'bool'},
\     'textureImage': { 'signature': 'Imagick $texture_wand | bool', 'return_type': 'bool'},
\     'thresholdImage': { 'signature': 'float $threshold [, int $channel = Imagick::CHANNEL_ALL] | bool', 'return_type': 'bool'},
\     'thumbnailImage': { 'signature': 'int $columns, int $rows [, bool $bestfit = false [, bool $fill = false]] | bool', 'return_type': 'bool'},
\     'tintImage': { 'signature': 'mixed $tint, mixed $opacity | bool', 'return_type': 'bool'},
\     'transformImage': { 'signature': 'string $crop, string $geometry | Imagick', 'return_type': 'Imagick'},
\     'transparentPaintImage': { 'signature': 'mixed $target, float $alpha, float $fuzz, bool $invert | bool', 'return_type': 'bool'},
\     'transposeImage': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'transverseImage': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'trimImage': { 'signature': 'float $fuzz | bool', 'return_type': 'bool'},
\     'uniqueImageColors': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'unsharpMaskImage': { 'signature': 'float $radius, float $sigma, float $amount, float $threshold [, int $channel = Imagick::CHANNEL_ALL] | bool', 'return_type': 'bool'},
\     'valid': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'vignetteImage': { 'signature': 'float $blackPoint, float $whitePoint, int $x, int $y | bool', 'return_type': 'bool'},
\     'waveImage': { 'signature': 'float $amplitude, float $length | bool', 'return_type': 'bool'},
\     'whiteThresholdImage': { 'signature': 'mixed $threshold | bool', 'return_type': 'bool'},
\     'writeImage': { 'signature': '[ string $filename = NULL] | bool', 'return_type': 'bool'},
\     'writeImageFile': { 'signature': 'resource $filehandle | bool', 'return_type': 'bool'},
\     'writeImages': { 'signature': 'string $filename, bool $adjoin | bool', 'return_type': 'bool'},
\     'writeImagesFile': { 'signature': 'resource $filehandle | bool', 'return_type': 'bool'},
\   },
\   'static_methods': {
\   },
\},
\'imagickdraw': {
\   'name': 'ImagickDraw',
\   'constants': {
\   },
\   'properties': {
\   },
\   'static_properties': {
\   },
\   'methods': {
\     'affine': { 'signature': 'array $affine | bool', 'return_type': 'bool'},
\     'annotation': { 'signature': 'float $x, float $y, string $text | bool', 'return_type': 'bool'},
\     'arc': { 'signature': 'float $sx, float $sy, float $ex, float $ey, float $sd, float $ed | bool', 'return_type': 'bool'},
\     'bezier': { 'signature': 'array $coordinates | bool', 'return_type': 'bool'},
\     'circle': { 'signature': 'float $ox, float $oy, float $px, float $py | bool', 'return_type': 'bool'},
\     'clear': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'clone': { 'signature': 'void | ImagickDraw', 'return_type': 'ImagickDraw'},
\     'color': { 'signature': 'float $x, float $y, int $paintMethod | bool', 'return_type': 'bool'},
\     'comment': { 'signature': 'string $comment | bool', 'return_type': 'bool'},
\     'composite': { 'signature': 'int $compose, float $x, float $y, float $width, float $height, Imagick $compositeWand | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': 'void', 'return_type': ''},
\     'destroy': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'ellipse': { 'signature': 'float $ox, float $oy, float $rx, float $ry, float $start, float $end | bool', 'return_type': 'bool'},
\     'getClipPath': { 'signature': 'void | string', 'return_type': 'string'},
\     'getClipRule': { 'signature': 'void | int', 'return_type': 'int'},
\     'getClipUnits': { 'signature': 'void | int', 'return_type': 'int'},
\     'getFillColor': { 'signature': 'void | ImagickPixel', 'return_type': 'ImagickPixel'},
\     'getFillOpacity': { 'signature': 'void | float', 'return_type': 'float'},
\     'getFillRule': { 'signature': 'void | int', 'return_type': 'int'},
\     'getFont': { 'signature': 'void | string', 'return_type': 'string'},
\     'getFontFamily': { 'signature': 'void | string', 'return_type': 'string'},
\     'getFontSize': { 'signature': 'void | float', 'return_type': 'float'},
\     'getFontStyle': { 'signature': 'void | int', 'return_type': 'int'},
\     'getFontWeight': { 'signature': 'void | int', 'return_type': 'int'},
\     'getGravity': { 'signature': 'void | int', 'return_type': 'int'},
\     'getStrokeAntialias': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getStrokeColor': { 'signature': 'void | ImagickPixel', 'return_type': 'ImagickPixel'},
\     'getStrokeDashArray': { 'signature': 'void | array', 'return_type': 'array'},
\     'getStrokeDashOffset': { 'signature': 'void | float', 'return_type': 'float'},
\     'getStrokeLineCap': { 'signature': 'void | int', 'return_type': 'int'},
\     'getStrokeLineJoin': { 'signature': 'void | int', 'return_type': 'int'},
\     'getStrokeMiterLimit': { 'signature': 'void | int', 'return_type': 'int'},
\     'getStrokeOpacity': { 'signature': 'void | float', 'return_type': 'float'},
\     'getStrokeWidth': { 'signature': 'void | float', 'return_type': 'float'},
\     'getTextAlignment': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTextAntialias': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getTextDecoration': { 'signature': 'void | int', 'return_type': 'int'},
\     'getTextEncoding': { 'signature': 'void | string', 'return_type': 'string'},
\     'getTextUnderColor': { 'signature': 'void | ImagickPixel', 'return_type': 'ImagickPixel'},
\     'getVectorGraphics': { 'signature': 'void | string', 'return_type': 'string'},
\     'line': { 'signature': 'float $sx, float $sy, float $ex, float $ey | bool', 'return_type': 'bool'},
\     'matte': { 'signature': 'float $x, float $y, int $paintMethod | bool', 'return_type': 'bool'},
\     'pathClose': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'pathCurveToAbsolute': { 'signature': 'float $x1, float $y1, float $x2, float $y2, float $x, float $y | bool', 'return_type': 'bool'},
\     'pathCurveToQuadraticBezierAbsolute': { 'signature': 'float $x1, float $y1, float $x, float $y | bool', 'return_type': 'bool'},
\     'pathCurveToQuadraticBezierRelative': { 'signature': 'float $x1, float $y1, float $x, float $y | bool', 'return_type': 'bool'},
\     'pathCurveToQuadraticBezierSmoothAbsolute': { 'signature': 'float $x, float $y | bool', 'return_type': 'bool'},
\     'pathCurveToQuadraticBezierSmoothRelative': { 'signature': 'float $x, float $y | bool', 'return_type': 'bool'},
\     'pathCurveToRelative': { 'signature': 'float $x1, float $y1, float $x2, float $y2, float $x, float $y | bool', 'return_type': 'bool'},
\     'pathCurveToSmoothAbsolute': { 'signature': 'float $x2, float $y2, float $x, float $y | bool', 'return_type': 'bool'},
\     'pathCurveToSmoothRelative': { 'signature': 'float $x2, float $y2, float $x, float $y | bool', 'return_type': 'bool'},
\     'pathEllipticArcAbsolute': { 'signature': 'float $rx, float $ry, float $x_axis_rotation, bool $large_arc_flag, bool $sweep_flag, float $x, float $y | bool', 'return_type': 'bool'},
\     'pathEllipticArcRelative': { 'signature': 'float $rx, float $ry, float $x_axis_rotation, bool $large_arc_flag, bool $sweep_flag, float $x, float $y | bool', 'return_type': 'bool'},
\     'pathFinish': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'pathLineToAbsolute': { 'signature': 'float $x, float $y | bool', 'return_type': 'bool'},
\     'pathLineToHorizontalAbsolute': { 'signature': 'float $x | bool', 'return_type': 'bool'},
\     'pathLineToHorizontalRelative': { 'signature': 'float $x | bool', 'return_type': 'bool'},
\     'pathLineToRelative': { 'signature': 'float $x, float $y | bool', 'return_type': 'bool'},
\     'pathLineToVerticalAbsolute': { 'signature': 'float $y | bool', 'return_type': 'bool'},
\     'pathLineToVerticalRelative': { 'signature': 'float $y | bool', 'return_type': 'bool'},
\     'pathMoveToAbsolute': { 'signature': 'float $x, float $y | bool', 'return_type': 'bool'},
\     'pathMoveToRelative': { 'signature': 'float $x, float $y | bool', 'return_type': 'bool'},
\     'pathStart': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'point': { 'signature': 'float $x, float $y | bool', 'return_type': 'bool'},
\     'polygon': { 'signature': 'array $coordinates | bool', 'return_type': 'bool'},
\     'polyline': { 'signature': 'array $coordinates | bool', 'return_type': 'bool'},
\     'pop': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'popClipPath': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'popDefs': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'popPattern': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'push': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'pushClipPath': { 'signature': 'string $clip_mask_id | bool', 'return_type': 'bool'},
\     'pushDefs': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'pushPattern': { 'signature': 'string $pattern_id, float $x, float $y, float $width, float $height | bool', 'return_type': 'bool'},
\     'rectangle': { 'signature': 'float $x1, float $y1, float $x2, float $y2 | bool', 'return_type': 'bool'},
\     'render': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'rotate': { 'signature': 'float $degrees | bool', 'return_type': 'bool'},
\     'roundRectangle': { 'signature': 'float $x1, float $y1, float $x2, float $y2, float $rx, float $ry | bool', 'return_type': 'bool'},
\     'scale': { 'signature': 'float $x, float $y | bool', 'return_type': 'bool'},
\     'setClipPath': { 'signature': 'string $clip_mask | bool', 'return_type': 'bool'},
\     'setClipRule': { 'signature': 'int $fill_rule | bool', 'return_type': 'bool'},
\     'setClipUnits': { 'signature': 'int $clip_units | bool', 'return_type': 'bool'},
\     'setFillAlpha': { 'signature': 'float $opacity | bool', 'return_type': 'bool'},
\     'setFillColor': { 'signature': 'ImagickPixel $fill_pixel | bool', 'return_type': 'bool'},
\     'setFillOpacity': { 'signature': 'float $fillOpacity | bool', 'return_type': 'bool'},
\     'setFillPatternURL': { 'signature': 'string $fill_url | bool', 'return_type': 'bool'},
\     'setFillRule': { 'signature': 'int $fill_rule | bool', 'return_type': 'bool'},
\     'setFont': { 'signature': 'string $font_name | bool', 'return_type': 'bool'},
\     'setFontFamily': { 'signature': 'string $font_family | bool', 'return_type': 'bool'},
\     'setFontSize': { 'signature': 'float $pointsize | bool', 'return_type': 'bool'},
\     'setFontStretch': { 'signature': 'int $fontStretch | bool', 'return_type': 'bool'},
\     'setFontStyle': { 'signature': 'int $style | bool', 'return_type': 'bool'},
\     'setFontWeight': { 'signature': 'int $font_weight | bool', 'return_type': 'bool'},
\     'setGravity': { 'signature': 'int $gravity | bool', 'return_type': 'bool'},
\     'setStrokeAlpha': { 'signature': 'float $opacity | bool', 'return_type': 'bool'},
\     'setStrokeAntialias': { 'signature': 'bool $stroke_antialias | bool', 'return_type': 'bool'},
\     'setStrokeColor': { 'signature': 'ImagickPixel $stroke_pixel | bool', 'return_type': 'bool'},
\     'setStrokeDashArray': { 'signature': 'array $dashArray | bool', 'return_type': 'bool'},
\     'setStrokeDashOffset': { 'signature': 'float $dash_offset | bool', 'return_type': 'bool'},
\     'setStrokeLineCap': { 'signature': 'int $linecap | bool', 'return_type': 'bool'},
\     'setStrokeLineJoin': { 'signature': 'int $linejoin | bool', 'return_type': 'bool'},
\     'setStrokeMiterLimit': { 'signature': 'int $miterlimit | bool', 'return_type': 'bool'},
\     'setStrokeOpacity': { 'signature': 'float $stroke_opacity | bool', 'return_type': 'bool'},
\     'setStrokePatternURL': { 'signature': 'string $stroke_url | bool', 'return_type': 'bool'},
\     'setStrokeWidth': { 'signature': 'float $stroke_width | bool', 'return_type': 'bool'},
\     'setTextAlignment': { 'signature': 'int $alignment | bool', 'return_type': 'bool'},
\     'setTextAntialias': { 'signature': 'bool $antiAlias | bool', 'return_type': 'bool'},
\     'setTextDecoration': { 'signature': 'int $decoration | bool', 'return_type': 'bool'},
\     'setTextEncoding': { 'signature': 'string $encoding | bool', 'return_type': 'bool'},
\     'setTextUnderColor': { 'signature': 'ImagickPixel $under_color | bool', 'return_type': 'bool'},
\     'setVectorGraphics': { 'signature': 'string $xml | bool', 'return_type': 'bool'},
\     'setViewbox': { 'signature': 'int $x1, int $y1, int $x2, int $y2 | bool', 'return_type': 'bool'},
\     'skewX': { 'signature': 'float $degrees | bool', 'return_type': 'bool'},
\     'skewY': { 'signature': 'float $degrees | bool', 'return_type': 'bool'},
\     'translate': { 'signature': 'float $x, float $y | bool', 'return_type': 'bool'},
\   },
\   'static_methods': {
\   },
\},
\'imagickpixel': {
\   'name': 'ImagickPixel',
\   'constants': {
\   },
\   'properties': {
\   },
\   'static_properties': {
\   },
\   'methods': {
\     'clear': { 'signature': 'void | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': '[ string $color]', 'return_type': ''},
\     'destroy': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getColor': { 'signature': '[ bool $normalized = false] | array', 'return_type': 'array'},
\     'getColorAsString': { 'signature': 'void | string', 'return_type': 'string'},
\     'getColorCount': { 'signature': 'void | int', 'return_type': 'int'},
\     'getColorValue': { 'signature': 'int $color | float', 'return_type': 'float'},
\     'getHSL': { 'signature': 'void | array', 'return_type': 'array'},
\     'isPixelSimilar': { 'signature': 'ImagickPixel $color, float $fuzz | bool', 'return_type': 'bool'},
\     'isSimilar': { 'signature': 'ImagickPixel $color, float $fuzz | bool', 'return_type': 'bool'},
\     'setColor': { 'signature': 'string $color | bool', 'return_type': 'bool'},
\     'setColorValue': { 'signature': 'int $color, float $value | bool', 'return_type': 'bool'},
\     'setHSL': { 'signature': 'float $hue, float $saturation, float $luminosity | bool', 'return_type': 'bool'},
\   },
\   'static_methods': {
\   },
\},
\'imagickpixeliterator': {
\   'name': 'ImagickPixelIterator',
\   'constants': {
\   },
\   'properties': {
\   },
\   'static_properties': {
\   },
\   'methods': {
\     'clear': { 'signature': 'void | bool', 'return_type': 'bool'},
\     '__construct': { 'signature': 'Imagick $wand', 'return_type': ''},
\     'destroy': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'getCurrentIteratorRow': { 'signature': 'void | array', 'return_type': 'array'},
\     'getIteratorRow': { 'signature': 'void | int', 'return_type': 'int'},
\     'getNextIteratorRow': { 'signature': 'void | array', 'return_type': 'array'},
\     'getPreviousIteratorRow': { 'signature': 'void | array', 'return_type': 'array'},
\     'newPixelIterator': { 'signature': 'Imagick $wand | bool', 'return_type': 'bool'},
\     'newPixelRegionIterator': { 'signature': 'Imagick $wand, int $x, int $y, int $columns, int $rows | bool', 'return_type': 'bool'},
\     'resetIterator': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'setIteratorFirstRow': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'setIteratorLastRow': { 'signature': 'void | bool', 'return_type': 'bool'},
\     'setIteratorRow': { 'signature': 'int $row | bool', 'return_type': 'bool'},
\     'syncIterator': { 'signature': 'void | bool', 'return_type': 'bool'},
\   },
\   'static_methods': {
\   },
\},
\})
